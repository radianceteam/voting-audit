.version sol 0.45.0

.macro constructor
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7_with_init_storage$
}
;; constructor protection
GETGLOB 6
THROWIF 51
PUSHINT 1
SETGLOB 6
;; end constructor protection
ENDS
ACCEPT
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro setIcon
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDREF
ENDS
;; param: icon
CALLREF {
	CALL $setIcon_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	setIcon_internal
.type	setIcon_internal, @function
CALL $setIcon_internal_macro$

.macro setIcon_internal_macro
;; param: icon
; function setIcon
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; ==
GETGLOB 2
EQUAL
THROWIFNOT 100
ACCEPT
; expValue
; end expValue
;; push identifier icon
; colValue
; end colValue
; end function setIcon
SETGLOB 18

.macro preSstart
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: curPart
CALLREF {
	CALL $preSstart_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	preSstart_internal
.type	preSstart_internal, @function
CALL $preSstart_internal_macro$

.macro preSstart_internal_macro
;; param: curPart
; function preSstart
; expValue
; end expValue
;; push identifier curPart
DUP
; colValue
SETGLOB 17
; end colValue
CALLREF {
	CALL $start_internal_macro$
}
; end function preSstart
DROP

.macro start
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
ENDS
CALLREF {
	CALL $start_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	start_internal
.type	start_internal, @function
CALL $start_internal_macro$

.macro start_internal_macro
; function start
NULL
;; decl: pubkey
;; Remote call IDeAuditRoot.keysDeAudit
;; push identifier DeAuditRoot
GETGLOB 16
PUSHSLICE x9262e39c589a34c190b0174_
NEWC
STSLICE
STSLICE
PUSHINT 1
STUR 6
NEWC
STSLICECONST 0
;; push identifier pubkey
PUSH S2
ISNULL
THROWIFNOT 64
STSLICECONST 0
;; push identifier now
NOW
;; uint64
STUR 64
PUSHINT 291
STUR 32
STSLICECONST x6f711c36
STBREFR
ENDC
PUSHINT 0
SENDRAWMSG
DROP
; end function start

.macro SCgetDeauditAddresses
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
LDDICT
ROTREV
PAIR
SWAP
ENDS
;; param: keysDeAudit
CALLREF {
	CALL $SCgetDeauditAddresses_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	SCgetDeauditAddresses_internal
.type	SCgetDeauditAddresses_internal, @function
CALL $SCgetDeauditAddresses_internal_macro$

.macro SCgetDeauditAddresses_internal_macro
;; param: keysDeAudit
; function SCgetDeauditAddresses
; expValue
; end expValue
;; push identifier keysDeAudit
DUP
; colValue
SETGLOB 24
; end colValue
; for
PUSHINT 0
;; decl: i
PUSHCONT {
	;; push identifier i
	;; <
	;; get member length
	;; push identifier keysDeAudit
	PUSH2 S0, S1
	INDEX 0
	LESS
}
PUSHCONT {
	;; index
	;; push identifier i
	;; push identifier keysDeAudit
	PUSH2 S0, S1
	INDEX 1
	PUSHINT 32
	DICTUGET
	THROWIFNOT 50
	CALLREF {
		CALL $deauditsCaller_internal_macro$
	}
	;; ++
	; expValue
	; end expValue
	INC
	UFITS 8
	; colValue
	; end colValue
}
WHILE
DROP
; end for
CALLREF {
	CALL $mainMenu_internal_macro$
}
; end function SCgetDeauditAddresses
DROP

.macro deauditsCaller
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: curDeAudit
CALLREF {
	CALL $deauditsCaller_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	deauditsCaller_internal
.type	deauditsCaller_internal, @function
CALL $deauditsCaller_internal_macro$

.macro deauditsCaller_internal_macro
;; param: curDeAudit
; function deauditsCaller
NULL
;; decl: pubkey
;; Remote call IDeAudit.getDetails4Debot
;; push identifier curDeAudit
PUSH S1
PUSHSLICE x9260f9d5ebea34c190b0174_
NEWC
STSLICE
STSLICE
PUSHINT 1
STUR 6
NEWC
STSLICECONST 0
;; push identifier pubkey
PUSH S2
ISNULL
THROWIFNOT 64
STSLICECONST 0
;; push identifier now
NOW
;; uint64
STUR 64
PUSHINT 291
STUR 32
STSLICECONST x332e09a5
STBREFR
ENDC
PUSHINT 0
SENDRAWMSG
; end function deauditsCaller
DROP2

.macro SCgetDAstruct
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
LDREF
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
ENDS
;; param: sequentialNumber4Debot
;; param: name4Debot
;; param: rootDeAudit4Debot
;; param: dataDeAudit4Debot
;; param: tokenDeAudit4Debot
;; param: timeStart4Debot
;; param: colPeriod4Debot
;; param: valPeriod4Debot
;; param: colStake4Debot
;; param: valStake4Debot
CALLREF {
	CALL $SCgetDAstruct_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	SCgetDAstruct_internal
.type	SCgetDAstruct_internal, @function
CALL $SCgetDAstruct_internal_macro$

.macro SCgetDAstruct_internal_macro
;; param: sequentialNumber4Debot
;; param: name4Debot
;; param: rootDeAudit4Debot
;; param: dataDeAudit4Debot
;; param: tokenDeAudit4Debot
;; param: timeStart4Debot
;; param: colPeriod4Debot
;; param: valPeriod4Debot
;; param: colStake4Debot
;; param: valStake4Debot
; function SCgetDAstruct
;; index
;; get member sender
GETGLOB 9
;; push identifier DeAudits
GETGLOB 23
PUSHINT 267
DICTGETREF
PUSHCONT {
	CTOS
	CALLREF {
		LDU 32
		LDREF
		LDMSGADDR
		LDMSGADDRQ
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDMSGADDR
		}
		IFNOT
		LDMSGADDRQ
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDMSGADDR
		}
		IFNOT
		LDUQ 256
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 256
		}
		IFNOT
		LDUQ 256
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 256
		}
		IFNOT
		LDUQ 256
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 256
		}
		IFNOT
		LDUQ 128
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 128
		}
		IFNOT
		LDUQ 128
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 128
		}
		IFNOT
		LDUQ 128
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 128
		}
		IFNOT
		LDREF
		ENDS
		TUPLE 12
	}
}
PUSHCONT {
	PUSHINT 0
	PUSHREF {
	}
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	PUSHINT 0
	BLKPUSH 5, 0
	PUSHREF {
	}
	TUPLE 12
}
IFELSE
;; decl: cp
; expValue
; end expValue
;; push identifier sequentialNumber4Debot
; colValue
PUSH S10
SETINDEX 0
; end colValue
; expValue
; end expValue
;; push identifier name4Debot
; colValue
PUSH S9
SETINDEX 1
; end colValue
; expValue
; end expValue
;; push identifier rootDeAudit4Debot
; colValue
PUSH S8
SETINDEX 2
; end colValue
; expValue
; end expValue
;; push identifier dataDeAudit4Debot
; colValue
PUSH S7
SETINDEX 3
; end colValue
; expValue
; end expValue
;; push identifier tokenDeAudit4Debot
; colValue
PUSH S6
SETINDEX 4
; end colValue
; expValue
; end expValue
;; push identifier timeStart4Debot
; colValue
PUSH S5
SETINDEX 5
; end colValue
; expValue
; end expValue
;; push identifier colPeriod4Debot
; colValue
PUSH S4
SETINDEX 6
; end colValue
; expValue
; end expValue
;; push identifier valPeriod4Debot
; colValue
PUSH S3
SETINDEX 7
; end colValue
; expValue
; end expValue
;; push identifier colStake4Debot
; colValue
PUSH S2
SETINDEX 8
; end colValue
; expValue
; end expValue
;; push identifier valStake4Debot
; colValue
PUSH S1
SETINDEX 9
; end colValue
; expValue
;; fetch DeAudits
;; get member sender
GETGLOB 9
GETGLOB 23
; end expValue
;; push identifier cp
PUSH S2
; colValue
CALLREF {
	UNTUPLE 12
	REVERSE 12, 0
	NEWC
	STU 32
	STREF
	STSLICE
	BLKSWAP 9, 1
	NEWC
	STSLICE
	BLKSWAP 8, 1
	NEWC
	STSLICE
	STU 256
	BLKSWAP 6, 1
	NEWC
	STU 256
	STU 256
	STU 128
	STU 128
	STU 128
	STREF
	STBREFR
	STBREFR
	STBREFR
}
ENDC
ROTREV
PUSHINT 267
DICTSETREF
SETGLOB 23
; end colValue
; end function SCgetDAstruct
BLKDROP 11

.macro preStart
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
ENDS
;; param: index
CALLREF {
	CALL $preStart_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	preStart_internal
.type	preStart_internal, @function
CALL $preStart_internal_macro$

.macro preStart_internal_macro
;; param: index
; function preStart
CALLREF {
	CALL $mainMenu_internal_macro$
}
; end function preStart
DROP

.macro mainMenu
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
ENDS
CALLREF {
	CALL $mainMenu_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	mainMenu_internal
.type	mainMenu_internal, @function
CALL $mainMenu_internal_macro$

.macro mainMenu_internal_macro
; function mainMenu
PUSHREF {
	.blob x57656c636f6d6520746f2052616469616e636520566f74696e67204175646974206465626f7420696e746572666163652e
}
PUSHREF {
	.blob x
}
PUSHINT 5
NEWDICT
PUSHREF {
	.blob x44455620736574204154206465626f742061646472657373
}
PUSHREF {
	.blob x
}
PUSHINT 522979047
TUPLE 3
CALLREF {
	UNTUPLE 3
	XCHG s2
	NEWC
	STREF
	STREF
	STU 32
}
PUSHINT 0
ROT
PUSHINT 32
DICTUSETB
PUSHREF {
	.blob x4445562073657420434c206465626f742061646472657373
}
PUSHREF {
	.blob x
}
PUSHINT 1263239010
TUPLE 3
CALLREF {
	UNTUPLE 3
	XCHG s2
	NEWC
	STREF
	STREF
	STU 32
}
PUSHINT 1
ROT
PUSHINT 32
DICTUSETB
PUSHREF {
	.blob x566f74696e6720617564697473
}
PUSHREF {
	.blob x
}
PUSHINT 1358660711
TUPLE 3
CALLREF {
	UNTUPLE 3
	XCHG s2
	NEWC
	STREF
	STREF
	STU 32
}
PUSHINT 2
ROT
PUSHINT 32
DICTUSETB
PUSHREF {
	.blob x4c6f67696e206f72207369676e207570
}
PUSHREF {
	.blob x
}
PUSHINT 649551061
TUPLE 3
CALLREF {
	UNTUPLE 3
	XCHG s2
	NEWC
	STREF
	STREF
	STU 32
}
PUSHINT 3
ROT
PUSHINT 32
DICTUSETB
PUSHREF {
	.blob x51756974
}
PUSHREF {
	.blob x
}
PUSHINT 0
TUPLE 3
CALLREF {
	UNTUPLE 3
	XCHG s2
	NEWC
	STREF
	STREF
	STU 32
}
PUSHINT 4
ROT
PUSHINT 32
DICTUSETB
PAIR
CALLREF {
	CALL $Menu_no_obj_select_macro$
}
; end function mainMenu

.macro setCLdebAddress
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
ENDS
;; param: index
CALLREF {
	CALL $setCLdebAddress_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	setCLdebAddress_internal
.type	setCLdebAddress_internal, @function
CALL $setCLdebAddress_internal_macro$

.macro setCLdebAddress_internal_macro
;; param: index
; function setCLdebAddress
PUSHINT 88233906
PUSHREF {
	.blob x6465762073657420434c206465622061646464726573733a20
}
CALLREF {
	CALL $AddressInput_no_obj_get_macro$
}
; end function setCLdebAddress
DROP

.macro onsetCLDebadd
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: value
CALLREF {
	CALL $onsetCLDebadd_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	onsetCLDebadd_internal
.type	onsetCLDebadd_internal, @function
CALL $onsetCLDebadd_internal_macro$

.macro onsetCLDebadd_internal_macro
;; param: value
; function onsetCLDebadd
; expValue
; end expValue
;; push identifier value
DUP
; colValue
SETGLOB 15
; end colValue
CALLREF {
	CALL $mainMenu_internal_macro$
}
; end function onsetCLDebadd
DROP

.macro setACTMdebAddress
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
ENDS
;; param: index
CALLREF {
	CALL $setACTMdebAddress_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	setACTMdebAddress_internal
.type	setACTMdebAddress_internal, @function
CALL $setACTMdebAddress_internal_macro$

.macro setACTMdebAddress_internal_macro
;; param: index
; function setACTMdebAddress
PUSHINT 1259320241
PUSHREF {
	.blob x64657620736574206163746d206465622061646464726573733a20
}
CALLREF {
	CALL $AddressInput_no_obj_get_macro$
}
; end function setACTMdebAddress
DROP

.macro onsetDebadd
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: value
CALLREF {
	CALL $onsetDebadd_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	onsetDebadd_internal
.type	onsetDebadd_internal, @function
CALL $onsetDebadd_internal_macro$

.macro onsetDebadd_internal_macro
;; param: value
; function onsetDebadd
; expValue
; end expValue
;; push identifier value
DUP
; colValue
SETGLOB 14
; end colValue
CALLREF {
	CALL $mainMenu_internal_macro$
}
; end function onsetDebadd
DROP

.macro DAmenu
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
ENDS
;; param: index
CALLREF {
	CALL $DAmenu_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	DAmenu_internal
.type	DAmenu_internal, @function
CALL $DAmenu_internal_macro$

.macro DAmenu_internal_macro
;; param: index
; function DAmenu
PUSHINT 0
NEWDICT
PAIR
;; decl: m_menu
; for
PUSHINT 0
;; decl: i
PUSHCONT {
	;; push identifier i
	DUP
	;; <
	;; get member length
	;; push identifier keysDeAuditD
	GETGLOB 24
	INDEX 0
	LESS
}
PUSHCONT {
	;; index
	;; push identifier i
	DUP
	;; push identifier keysDeAuditD
	GETGLOB 24
	INDEX 1
	PUSHINT 32
	DICTUGET
	THROWIFNOT 50
	;; decl: curK
	;; index
	;; push identifier curK
	DUP
	;; push identifier DeAudits
	GETGLOB 23
	PUSHINT 267
	DICTGETREF
	PUSHCONT {
		CTOS
		CALLREF {
			LDU 32
			LDREF
			LDMSGADDR
			LDMSGADDRQ
			PUSHCONT {
				;; load next cell
				LDREF
				ENDS
				CTOS
				LDMSGADDR
			}
			IFNOT
			LDMSGADDRQ
			PUSHCONT {
				;; load next cell
				LDREF
				ENDS
				CTOS
				LDMSGADDR
			}
			IFNOT
			LDUQ 256
			PUSHCONT {
				;; load next cell
				LDREF
				ENDS
				CTOS
				LDU 256
			}
			IFNOT
			LDUQ 256
			PUSHCONT {
				;; load next cell
				LDREF
				ENDS
				CTOS
				LDU 256
			}
			IFNOT
			LDUQ 256
			PUSHCONT {
				;; load next cell
				LDREF
				ENDS
				CTOS
				LDU 256
			}
			IFNOT
			LDUQ 128
			PUSHCONT {
				;; load next cell
				LDREF
				ENDS
				CTOS
				LDU 128
			}
			IFNOT
			LDUQ 128
			PUSHCONT {
				;; load next cell
				LDREF
				ENDS
				CTOS
				LDU 128
			}
			IFNOT
			LDUQ 128
			PUSHCONT {
				;; load next cell
				LDREF
				ENDS
				CTOS
				LDU 128
			}
			IFNOT
			LDREF
			ENDS
			TUPLE 12
		}
	}
	PUSHCONT {
		PUSHINT 0
		PUSHREF {
		}
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
		PUSHINT 0
		BLKPUSH 5, 0
		PUSHREF {
		}
		TUPLE 12
	}
	IFELSE
	;; decl: cp
	PUSHREF {
	}
	;; decl: status
	;; push identifier now
	NOW
	;; uint256
	;; decl: time
	;; if
	;; push identifier time
	;; <
	;; get member timeStart
	;; push identifier cp
	PUSH2 S0, S2
	INDEX 5
	LESS
	PUSHCONT {
		; expValue
		; end expValue
		PUSHREF {
			.blob x6e6f742073746172746564
		}
		; colValue
		POP S2
		; end colValue
	}
	PUSHCONT {
		;; if
		;; push identifier time
		;; >
		;; get member timeStart
		;; push identifier cp
		PUSH2 S0, S2
		INDEX 5
		GREATER
		;; short-circuiting &&
		DUP
		PUSHCONT {
			DROP
			;; push identifier time
			;; <
			;; get member colPeriod
			;; push identifier cp
			PUSH2 S0, S2
			INDEX 6
			LESS
		}
		IF
		PUSHCONT {
			; expValue
			; end expValue
			PUSHREF {
				.blob x6265747765656e20737461727420616e6420636f6c20706572696f64
			}
			; colValue
			POP S2
			; end colValue
		}
		PUSHCONT {
			;; if
			;; push identifier time
			;; >
			;; get member colPeriod
			;; push identifier cp
			PUSH2 S0, S2
			INDEX 6
			GREATER
			;; short-circuiting &&
			DUP
			PUSHCONT {
				DROP
				;; push identifier time
				;; <
				;; get member valPeriod
				;; push identifier cp
				PUSH2 S0, S2
				INDEX 7
				LESS
			}
			IF
			PUSHCONT {
				; expValue
				; end expValue
				PUSHREF {
					.blob x6265747765656e20636f6c20616e642076616c20706572696f64
				}
				; colValue
				POP S2
				; end colValue
			}
			PUSHCONT {
				; expValue
				; end expValue
				PUSHREF {
					.blob x656e646564
				}
				; colValue
				POP S2
				; end colValue
			}
			IFELSE
			;; end if
		}
		IFELSE
		;; end if
	}
	IFELSE
	;; end if
	NIL
	NEWC
	PUSHSLICE x3d3d3d3d3d3d3d0a44416e616d653a20
	CALLREF {
		CALL $storeStringInBuilders_macro$
	}
	;; get member name
	;; push identifier cp
	PUSH S4
	INDEX 1
	CTOS
	CALLREF {
		CALL $storeStringInBuilders_macro$
	}
	PUSHSLICE x0a74696d6553746172743a
	CALLREF {
		CALL $storeStringInBuilders_macro$
	}
	;; get member timeStart
	;; push identifier cp
	PUSH S4
	INDEX 5
	PUSHINT 0
	FALSE
	FALSE
	CALLREF {
		CALL $convertIntToDecStr_macro$
	}
	PUSHSLICE x0a636f6c506572696f643a20
	CALLREF {
		CALL $storeStringInBuilders_macro$
	}
	;; get member colPeriod
	;; push identifier cp
	PUSH S4
	INDEX 6
	PUSHINT 0
	FALSE
	FALSE
	CALLREF {
		CALL $convertIntToDecStr_macro$
	}
	PUSHSLICE x0a76616c506572696f643a20
	CALLREF {
		CALL $storeStringInBuilders_macro$
	}
	;; get member valPeriod
	;; push identifier cp
	PUSH S4
	INDEX 7
	PUSHINT 0
	FALSE
	FALSE
	CALLREF {
		CALL $convertIntToDecStr_macro$
	}
	PUSHSLICE x0a7374617475733a
	CALLREF {
		CALL $storeStringInBuilders_macro$
	}
	;; push identifier status
	PUSH S3
	CTOS
	CALLREF {
		CALL $storeStringInBuilders_macro$
	}
	PUSHSLICE x0a0a
	CALLREF {
		CALL $storeStringInBuilders_macro$
	}
	CALLREF {
		CALL $assembleList_macro$
	}
	;; decl: curVdata
	; expValue
	; end expValue
	;; push identifier curVdata
	PUSH2 S6, S0
	PUSHREF {
		.blob x
	}
	PUSHINT 1539101388
	TUPLE 3
	;; array.push(..)
	CALLREF {
		UNTUPLE 3
		XCHG s2
		NEWC
		STREF
		STREF
		STU 32
	}
	SWAP
	UNPAIR
	PUSH S1
	INC
	XCHG s3
	ROTREV
	PUSHINT 32
	DICTUSETB
	PAIR
	; colValue
	POP S7
	; end colValue
	BLKDROP 5
	;; ++
	; expValue
	; end expValue
	INC
	UFITS 8
	; colValue
	; end colValue
}
WHILE
DROP
; end for
; expValue
DUP
; end expValue
PUSHREF {
	.blob x4261636b20746f20766f74696e67206c697374206d656e75
}
PUSHREF {
	.blob x
}
PUSHINT 250476418
TUPLE 3
;; array.push(..)
CALLREF {
	UNTUPLE 3
	XCHG s2
	NEWC
	STREF
	STREF
	STU 32
}
SWAP
UNPAIR
PUSH S1
INC
XCHG s3
ROTREV
PUSHINT 32
DICTUSETB
PAIR
; colValue
NIP
; end colValue
PUSHREF {
	.blob x43686f6f736520766f74696e673a
}
PUSHREF {
	.blob x
}
;; push identifier m_menu
PUSH S2
CALLREF {
	CALL $Menu_no_obj_select_macro$
}
; end function DAmenu
DROP2

.macro showVotingAuditss
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
ENDS
;; param: index
CALLREF {
	CALL $showVotingAuditss_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	showVotingAuditss_internal
.type	showVotingAuditss_internal, @function
CALL $showVotingAuditss_internal_macro$

.macro showVotingAuditss_internal_macro
;; param: index
; function showVotingAuditss
; expValue
; end expValue
;; index
;; push identifier index
DUP
;; push identifier keysDeAuditD
GETGLOB 24
INDEX 1
PUSHINT 32
DICTUGET
THROWIFNOT 50
; colValue
; end colValue
;; index
;; push identifier cureDA
DUP
SETGLOB 27
;; push identifier DeAudits
GETGLOB 23
PUSHINT 267
DICTGETREF
PUSHCONT {
	CTOS
	CALLREF {
		LDU 32
		LDREF
		LDMSGADDR
		LDMSGADDRQ
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDMSGADDR
		}
		IFNOT
		LDMSGADDRQ
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDMSGADDR
		}
		IFNOT
		LDUQ 256
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 256
		}
		IFNOT
		LDUQ 256
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 256
		}
		IFNOT
		LDUQ 256
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 256
		}
		IFNOT
		LDUQ 128
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 128
		}
		IFNOT
		LDUQ 128
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 128
		}
		IFNOT
		LDUQ 128
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 128
		}
		IFNOT
		LDREF
		ENDS
		TUPLE 12
	}
}
PUSHCONT {
	PUSHINT 0
	PUSHREF {
	}
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	PUSHINT 0
	BLKPUSH 5, 0
	PUSHREF {
	}
	TUPLE 12
}
IFELSE
;; decl: cr
; expValue
; end expValue
;; get member dataDeAudit
;; push identifier cr
DUP
INDEX 3
; colValue
SETGLOB 28
; end colValue
; expValue
; end expValue
;; get member tokenDeAudit
;; push identifier cr
DUP
INDEX 4
; colValue
SETGLOB 29
; end colValue
NULL
;; decl: pubkey
;; Remote call IRootTokenContract.getTotalSupply
;; push identifier curTokenDeAudit
GETGLOB 29
PUSHSLICE x926032ba732a34c190b0174_
NEWC
STSLICE
STSLICE
PUSHINT 1
STUR 6
PUSHINT 0
NEWC
STSLICECONST 0
;; push identifier pubkey
PUSH S3
ISNULL
THROWIFNOT 64
STSLICECONST 0
;; push identifier now
NOW
;; uint64
STUR 64
PUSHINT 291
STUR 32
STSLICECONST x331f51a4
STU 32
STBREFR
ENDC
PUSHINT 0
SENDRAWMSG
; end function showVotingAuditss
BLKDROP 3

.macro SCgetTS
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
ENDS
;; param: value0
CALLREF {
	CALL $SCgetTS_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	SCgetTS_internal
.type	SCgetTS_internal, @function
CALL $SCgetTS_internal_macro$

.macro SCgetTS_internal_macro
;; param: value0
; function SCgetTS
;; index
;; push identifier cureDA
GETGLOB 27
;; push identifier DeAudits
GETGLOB 23
PUSHINT 267
DICTGETREF
PUSHCONT {
	CTOS
	CALLREF {
		LDU 32
		LDREF
		LDMSGADDR
		LDMSGADDRQ
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDMSGADDR
		}
		IFNOT
		LDMSGADDRQ
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDMSGADDR
		}
		IFNOT
		LDUQ 256
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 256
		}
		IFNOT
		LDUQ 256
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 256
		}
		IFNOT
		LDUQ 256
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 256
		}
		IFNOT
		LDUQ 128
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 128
		}
		IFNOT
		LDUQ 128
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 128
		}
		IFNOT
		LDUQ 128
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 128
		}
		IFNOT
		LDREF
		ENDS
		TUPLE 12
	}
}
PUSHCONT {
	PUSHINT 0
	PUSHREF {
	}
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	PUSHINT 0
	BLKPUSH 5, 0
	PUSHREF {
	}
	TUPLE 12
}
IFELSE
;; decl: cr
; expValue
; end expValue
;; push identifier value0
; colValue
PUSH S1
SETINDEX 10
; end colValue
; expValue
;; fetch DeAudits
;; push identifier cureDA
GETGLOB 27
GETGLOB 23
; end expValue
;; push identifier cr
PUSH S2
; colValue
CALLREF {
	UNTUPLE 12
	REVERSE 12, 0
	NEWC
	STU 32
	STREF
	STSLICE
	BLKSWAP 9, 1
	NEWC
	STSLICE
	BLKSWAP 8, 1
	NEWC
	STSLICE
	STU 256
	BLKSWAP 6, 1
	NEWC
	STU 256
	STU 256
	STU 128
	STU 128
	STU 128
	STREF
	STBREFR
	STBREFR
	STBREFR
}
ENDC
ROTREV
PUSHINT 267
DICTSETREF
SETGLOB 23
; end colValue
CALLREF {
	CALL $getFromDAD_internal_macro$
}
; end function SCgetTS
DROP2

.macro getFromDAD
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
ENDS
CALLREF {
	CALL $getFromDAD_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	getFromDAD_internal
.type	getFromDAD_internal, @function
CALL $getFromDAD_internal_macro$

.macro getFromDAD_internal_macro
; function getFromDAD
NULL
;; decl: pubkey
;; Remote call IDeAuditData.name
;; push identifier curDataDeAudit
GETGLOB 28
PUSHSLICE x9263fa38ef9a34c190b0174_
NEWC
STSLICE
STSLICE
PUSHINT 1
STUR 6
NEWC
STSLICECONST 0
;; push identifier pubkey
PUSH S2
ISNULL
THROWIFNOT 64
STSLICECONST 0
;; push identifier now
NOW
;; uint64
STUR 64
PUSHINT 291
STUR 32
STSLICECONST x7985b3f4
STBREFR
ENDC
PUSHINT 0
SENDRAWMSG
DROP
; end function getFromDAD

.macro SCgetFromDAD
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDREF
ENDS
;; param: name
CALLREF {
	CALL $SCgetFromDAD_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	SCgetFromDAD_internal
.type	SCgetFromDAD_internal, @function
CALL $SCgetFromDAD_internal_macro$

.macro SCgetFromDAD_internal_macro
;; param: name
; function SCgetFromDAD
;; index
;; push identifier cureDA
GETGLOB 27
;; push identifier DeAudits
GETGLOB 23
PUSHINT 267
DICTGETREF
PUSHCONT {
	CTOS
	CALLREF {
		LDU 32
		LDREF
		LDMSGADDR
		LDMSGADDRQ
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDMSGADDR
		}
		IFNOT
		LDMSGADDRQ
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDMSGADDR
		}
		IFNOT
		LDUQ 256
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 256
		}
		IFNOT
		LDUQ 256
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 256
		}
		IFNOT
		LDUQ 256
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 256
		}
		IFNOT
		LDUQ 128
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 128
		}
		IFNOT
		LDUQ 128
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 128
		}
		IFNOT
		LDUQ 128
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 128
		}
		IFNOT
		LDREF
		ENDS
		TUPLE 12
	}
}
PUSHCONT {
	PUSHINT 0
	PUSHREF {
	}
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	PUSHINT 0
	BLKPUSH 5, 0
	PUSHREF {
	}
	TUPLE 12
}
IFELSE
;; decl: cr
; expValue
; end expValue
;; push identifier name
; colValue
PUSH S1
SETINDEX 11
; end colValue
; expValue
;; fetch DeAudits
;; push identifier cureDA
GETGLOB 27
GETGLOB 23
; end expValue
;; push identifier cr
PUSH S2
; colValue
CALLREF {
	UNTUPLE 12
	REVERSE 12, 0
	NEWC
	STU 32
	STREF
	STSLICE
	BLKSWAP 9, 1
	NEWC
	STSLICE
	BLKSWAP 8, 1
	NEWC
	STSLICE
	STU 256
	BLKSWAP 6, 1
	NEWC
	STU 256
	STU 256
	STU 128
	STU 128
	STU 128
	STREF
	STBREFR
	STBREFR
	STBREFR
}
ENDC
ROTREV
PUSHINT 267
DICTSETREF
SETGLOB 23
; end colValue
CALLREF {
	CALL $showCurDAD_internal_macro$
}
; end function SCgetFromDAD
DROP2

.macro showCurDAD
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
ENDS
CALLREF {
	CALL $showCurDAD_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	showCurDAD_internal
.type	showCurDAD_internal, @function
CALL $showCurDAD_internal_macro$

.macro showCurDAD_internal_macro
; function showCurDAD
;; index
;; push identifier cureDA
GETGLOB 27
;; push identifier DeAudits
GETGLOB 23
PUSHINT 267
DICTGETREF
PUSHCONT {
	CTOS
	CALLREF {
		LDU 32
		LDREF
		LDMSGADDR
		LDMSGADDRQ
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDMSGADDR
		}
		IFNOT
		LDMSGADDRQ
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDMSGADDR
		}
		IFNOT
		LDUQ 256
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 256
		}
		IFNOT
		LDUQ 256
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 256
		}
		IFNOT
		LDUQ 256
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 256
		}
		IFNOT
		LDUQ 128
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 128
		}
		IFNOT
		LDUQ 128
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 128
		}
		IFNOT
		LDUQ 128
		PUSHCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 128
		}
		IFNOT
		LDREF
		ENDS
		TUPLE 12
	}
}
PUSHCONT {
	PUSHINT 0
	PUSHREF {
	}
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	PUSHINT 0
	BLKPUSH 5, 0
	PUSHREF {
	}
	TUPLE 12
}
IFELSE
;; decl: cr
PUSHINT 0
NIL
NEWC
PUSHSLICE x3d3d3d3d3d3d3d3d3d3d3d3d63722e6e616d653a20
CALLREF {
	CALL $storeStringInBuilders_macro$
}
;; get member sequentialNumber
;; push identifier cr
PUSH S3
INDEX 0
PUSHINT 0
FALSE
FALSE
CALLREF {
	CALL $convertIntToDecStr_macro$
}
PUSHREFSLICE {
	.blob x3d3d3d3d3d3d3d3d3d3d3d3d3d3d0a63722e73657175656e7469616c4e756d6265723a20
}
CALLREF {
	CALL $storeStringInBuilders_macro$
}
;; get member name
;; push identifier cr
PUSH S3
INDEX 1
CTOS
CALLREF {
	CALL $storeStringInBuilders_macro$
}
PUSHSLICE x0a63722e74696d6553746172743a20
CALLREF {
	CALL $storeStringInBuilders_macro$
}
;; get member timeStart
;; push identifier cr
PUSH S3
INDEX 5
PUSHINT 0
FALSE
FALSE
CALLREF {
	CALL $convertIntToDecStr_macro$
}
PUSHSLICE x0a63722e636f6c506572696f643a20
CALLREF {
	CALL $storeStringInBuilders_macro$
}
;; get member colPeriod
;; push identifier cr
PUSH S3
INDEX 6
PUSHINT 0
FALSE
FALSE
CALLREF {
	CALL $convertIntToDecStr_macro$
}
PUSHSLICE x0a63722e76616c506572696f643a20
CALLREF {
	CALL $storeStringInBuilders_macro$
}
;; get member valPeriod
;; push identifier cr
PUSH S3
INDEX 7
PUSHINT 0
FALSE
FALSE
CALLREF {
	CALL $convertIntToDecStr_macro$
}
PUSHSLICE x0a636f6c5374616b653a20
CALLREF {
	CALL $storeStringInBuilders_macro$
}
;; get member colStake
;; push identifier cr
PUSH S3
INDEX 8
PUSHINT 0
FALSE
FALSE
CALLREF {
	CALL $convertIntToDecStr_macro$
}
PUSHSLICE x0a76616c5374616b653a20
CALLREF {
	CALL $storeStringInBuilders_macro$
}
;; get member valStake
;; push identifier cr
PUSH S3
INDEX 9
PUSHINT 0
FALSE
FALSE
CALLREF {
	CALL $convertIntToDecStr_macro$
}
PUSHSLICE x0a63722e746f74616c537570706c793a20
CALLREF {
	CALL $storeStringInBuilders_macro$
}
;; get member totalSupply
;; push identifier cr
PUSH S3
INDEX 10
PUSHINT 0
FALSE
FALSE
CALLREF {
	CALL $convertIntToDecStr_macro$
}
PUSHSLICE x0a63722e4441446e616d653a20
CALLREF {
	CALL $storeStringInBuilders_macro$
}
;; get member DADname
;; push identifier cr
PUSH S3
INDEX 11
CTOS
CALLREF {
	CALL $storeStringInBuilders_macro$
}
PUSHSLICE x0a3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d
CALLREF {
	CALL $storeStringInBuilders_macro$
}
CALLREF {
	CALL $assembleList_macro$
}
CALLREF {
	CALL $Terminal_no_obj_print_macro$
}
PUSHINT 0
CALLREF {
	CALL $DAmenu_internal_macro$
}
DROP
; end function showCurDAD

.macro getFCAddressAndKeys
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
ENDS
;; param: index
CALLREF {
	CALL $getFCAddressAndKeys_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	getFCAddressAndKeys_internal
.type	getFCAddressAndKeys_internal, @function
CALL $getFCAddressAndKeys_internal_macro$

.macro getFCAddressAndKeys_internal_macro
;; param: index
; function getFCAddressAndKeys
PUSHREF {
	.blob x4c6f67696e206f72207369676e207570
}
PUSHREF {
	.blob x
}
PUSHINT 3
NEWDICT
PUSHREF {
	.blob x47656e6572617465206120736565642070687261736520666f72206d65
}
PUSHREF {
	.blob x
}
PUSHINT 1502274774
TUPLE 3
CALLREF {
	UNTUPLE 3
	XCHG s2
	NEWC
	STREF
	STREF
	STU 32
}
PUSHINT 0
ROT
PUSHINT 32
DICTUSETB
PUSHREF {
	.blob x456e746572207365656420706872617365
}
PUSHREF {
	.blob x
}
PUSHINT 739503393
TUPLE 3
CALLREF {
	UNTUPLE 3
	XCHG s2
	NEWC
	STREF
	STREF
	STU 32
}
PUSHINT 1
ROT
PUSHINT 32
DICTUSETB
PUSHREF {
	.blob x52657475726e20746f206d61696e206d656e75
}
PUSHREF {
	.blob x
}
PUSHINT 250476418
TUPLE 3
CALLREF {
	UNTUPLE 3
	XCHG s2
	NEWC
	STREF
	STREF
	STU 32
}
PUSHINT 2
ROT
PUSHINT 32
DICTUSETB
PAIR
CALLREF {
	CALL $Menu_no_obj_select_macro$
}
; end function getFCAddressAndKeys
DROP

.macro menuGenSeedPhrase
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
ENDS
;; param: index
CALLREF {
	CALL $menuGenSeedPhrase_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	menuGenSeedPhrase_internal
.type	menuGenSeedPhrase_internal, @function
CALL $menuGenSeedPhrase_internal_macro$

.macro menuGenSeedPhrase_internal_macro
;; param: index
; function menuGenSeedPhrase
PUSHINT 1339057434
PUSHINT 1
PUSHINT 12
CALLREF {
	CALL $Sdk_no_obj_mnemonicFromRandom_macro$
}
; end function menuGenSeedPhrase
DROP

.macro showMnemonic
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDREF
ENDS
;; param: phrase
CALLREF {
	CALL $showMnemonic_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	showMnemonic_internal
.type	showMnemonic_internal, @function
CALL $showMnemonic_internal_macro$

.macro showMnemonic_internal_macro
;; param: phrase
; function showMnemonic
PUSHINT 0
NIL
NEWC
PUSHSLICE x47656e657261746564207365656420706872617365203e20
CALLREF {
	CALL $storeStringInBuilders_macro$
}
;; push identifier phrase
PUSH S3
CTOS
CALLREF {
	CALL $storeStringInBuilders_macro$
}
PUSHREFSLICE {
	.blob x0a577269746520646f776e20616e6420736176652069742e20506c6561736520646f6e277420666f7267657420697421
}
CALLREF {
	CALL $storeStringInBuilders_macro$
}
CALLREF {
	CALL $assembleList_macro$
}
CALLREF {
	CALL $Terminal_no_obj_print_macro$
}
PUSHINT 1
CALLREF {
	CALL $getFCAddressAndKeys_internal_macro$
}
; end function showMnemonic
DROP

.macro menuEnterSeedPhrase
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
ENDS
;; param: index
CALLREF {
	CALL $menuEnterSeedPhrase_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	menuEnterSeedPhrase_internal
.type	menuEnterSeedPhrase_internal, @function
CALL $menuEnterSeedPhrase_internal_macro$

.macro menuEnterSeedPhrase_internal_macro
;; param: index
; function menuEnterSeedPhrase
PUSHINT 46345047
PUSHREF {
	.blob x506c656173652c20656e74657220796f75722073656564207068726173653a
}
FALSE
CALLREF {
	CALL $Terminal_no_obj_input_macro$
}
; end function menuEnterSeedPhrase
DROP

.macro checkSeedPhrase
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDREF
ENDS
;; param: value
CALLREF {
	CALL $checkSeedPhrase_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	checkSeedPhrase_internal
.type	checkSeedPhrase_internal, @function
CALL $checkSeedPhrase_internal_macro$

.macro checkSeedPhrase_internal_macro
;; param: value
; function checkSeedPhrase
; expValue
; end expValue
;; push identifier value
DUP
; colValue
SETGLOB 19
; end colValue
PUSHINT 17991549
;; push identifier m_seedphrase
GETGLOB 19
CALLREF {
	CALL $Sdk_no_obj_mnemonicVerify_macro$
}
; end function checkSeedPhrase
DROP

.macro verifySeedPhrase
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDI 1
ENDS
;; param: valid
CALLREF {
	CALL $verifySeedPhrase_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	verifySeedPhrase_internal
.type	verifySeedPhrase_internal, @function
CALL $verifySeedPhrase_internal_macro$

.macro verifySeedPhrase_internal_macro
;; param: valid
; function verifySeedPhrase
;; if
;; push identifier valid
DUP
PUSHCONT {
	;; push identifier m_seedphrase
	GETGLOB 19
	CALLREF {
		CALL $getMasterKeysFromMnemonic_internal_macro$
	}
}
PUSHCONT {
	PUSHINT 0
	PUSHREF {
		.blob x4572726f723a206e6f742076616c696420736565642070687261736521202874727920746f20656e74657220697420776974686f75742071756f7465732c207370616365206265666f726520616e64206166746572207365656420706872617365206f722067656e65726174652061206e6577206f6e6529
	}
	CALLREF {
		CALL $Terminal_no_obj_print_macro$
	}
	PUSHINT 1
	CALLREF {
		CALL $getFCAddressAndKeys_internal_macro$
	}
}
IFELSE
;; end if
; end function verifySeedPhrase
DROP

.macro getMasterKeysFromMnemonic
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDREF
ENDS
;; param: phrase
CALLREF {
	CALL $getMasterKeysFromMnemonic_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	getMasterKeysFromMnemonic_internal
.type	getMasterKeysFromMnemonic_internal, @function
CALL $getMasterKeysFromMnemonic_internal_macro$

.macro getMasterKeysFromMnemonic_internal_macro
;; param: phrase
; function getMasterKeysFromMnemonic
PUSHINT 163222878
;; push identifier phrase
PUSH S1
CALLREF {
	CALL $Sdk_no_obj_hdkeyXprvFromMnemonic_macro$
}
; end function getMasterKeysFromMnemonic
DROP

.macro getMasterKeysFromMnemonicStep1
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDREF
ENDS
;; param: xprv
CALLREF {
	CALL $getMasterKeysFromMnemonicStep1_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	getMasterKeysFromMnemonicStep1_internal
.type	getMasterKeysFromMnemonicStep1_internal, @function
CALL $getMasterKeysFromMnemonicStep1_internal_macro$

.macro getMasterKeysFromMnemonicStep1_internal_macro
;; param: xprv
; function getMasterKeysFromMnemonicStep1
PUSHREF {
	.blob x6d2f3434272f333936272f30272f302f30
}
;; decl: path
PUSHINT 1348879102
;; push identifier xprv
;; push identifier path
BLKPUSH 2, 2
CALLREF {
	CALL $Sdk_no_obj_hdkeyDeriveFromXprvPath_macro$
}
; end function getMasterKeysFromMnemonicStep1
DROP2

.macro getMasterKeysFromMnemonicStep2
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDREF
ENDS
;; param: xprv
CALLREF {
	CALL $getMasterKeysFromMnemonicStep2_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	getMasterKeysFromMnemonicStep2_internal
.type	getMasterKeysFromMnemonicStep2_internal, @function
CALL $getMasterKeysFromMnemonicStep2_internal_macro$

.macro getMasterKeysFromMnemonicStep2_internal_macro
;; param: xprv
; function getMasterKeysFromMnemonicStep2
PUSHINT 1501446644
;; push identifier xprv
PUSH S1
CALLREF {
	CALL $Sdk_no_obj_hdkeySecretFromXprv_macro$
}
; end function getMasterKeysFromMnemonicStep2
DROP

.macro getMasterKeysFromMnemonicStep3
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
ENDS
;; param: sec
CALLREF {
	CALL $getMasterKeysFromMnemonicStep3_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	getMasterKeysFromMnemonicStep3_internal
.type	getMasterKeysFromMnemonicStep3_internal, @function
CALL $getMasterKeysFromMnemonicStep3_internal_macro$

.macro getMasterKeysFromMnemonicStep3_internal_macro
;; param: sec
; function getMasterKeysFromMnemonicStep3
PUSHINT 728376660
;; push identifier sec
PUSH S1
CALLREF {
	CALL $Sdk_no_obj_naclSignKeypairFromSecretKey_macro$
}
; end function getMasterKeysFromMnemonicStep3
DROP

.macro getMasterKeysFromMnemonicStep4
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
ENDS
;; param: sec
;; param: pub
CALLREF {
	CALL $getMasterKeysFromMnemonicStep4_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	getMasterKeysFromMnemonicStep4_internal
.type	getMasterKeysFromMnemonicStep4_internal, @function
CALL $getMasterKeysFromMnemonicStep4_internal_macro$

.macro getMasterKeysFromMnemonicStep4_internal_macro
;; param: sec
;; param: pub
; function getMasterKeysFromMnemonicStep4
; expValue
; end expValue
;; push identifier pub
DUP
; colValue
SETGLOB 20
; end colValue
; expValue
; end expValue
;; push identifier sec
PUSH S1
; colValue
SETGLOB 21
; end colValue
NULL
;; decl: pubkey
;; Remote call IDeAuditRoot.checkPubKey
;; push identifier DeAuditRoot
GETGLOB 16
PUSHSLICE x92602462ccea34c190b0174_
NEWC
STSLICE
STSLICE
PUSHINT 1
STUR 6
;; push identifier m_masterPubKey
GETGLOB 20
NEWC
STSLICECONST 0
;; push identifier pubkey
PUSH S3
ISNULL
THROWIFNOT 64
STSLICECONST 0
;; push identifier now
NOW
;; uint64
STUR 64
PUSHINT 291
STUR 32
STSLICECONST x0c1dc8b2
STU 256
STBREFR
ENDC
PUSHINT 0
SENDRAWMSG
; end function getMasterKeysFromMnemonicStep4
BLKDROP 3

.macro SCcheckPubKey
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDI 1
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: status
;; param: participant
CALLREF {
	CALL $SCcheckPubKey_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	SCcheckPubKey_internal
.type	SCcheckPubKey_internal, @function
CALL $SCcheckPubKey_internal_macro$

.macro SCcheckPubKey_internal_macro
;; param: status
;; param: participant
; function SCcheckPubKey
;; if
;; push identifier status
PUSH S1
PUSHCONT {
	PUSHINT 0
	PUSHREF {
		.blob x636865636b656420737563636573732c20676f696e6720746f206d656d62657273206d656e75
	}
	CALLREF {
		CALL $Terminal_no_obj_print_macro$
	}
	CALLREF {
		CALL $getAddresPart_internal_macro$
	}
}
PUSHCONT {
	PUSHINT 1245629296
	PUSHREF {
		.blob x596f7520646f206e6f742068617665206465706c6f796564207061727469636970616e742c20776f756c6420796f75206c696b6520746f206465706c6f793f
	}
	CALLREF {
		CALL $ConfirmInput_no_obj_get_macro$
	}
}
IFELSE
;; end if
; end function SCcheckPubKey
DROP2

.macro checkDeployAnswer
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDI 1
ENDS
;; param: value
CALLREF {
	CALL $checkDeployAnswer_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	checkDeployAnswer_internal
.type	checkDeployAnswer_internal, @function
CALL $checkDeployAnswer_internal_macro$

.macro checkDeployAnswer_internal_macro
;; param: value
; function checkDeployAnswer
;; if
;; push identifier value
DUP
PUSHCONT {
	CALLREF {
		CALL $deploy_genAddr_internal_macro$
	}
}
PUSHCONT {
	CALLREF {
		CALL $start_internal_macro$
	}
}
IFELSE
;; end if
; end function checkDeployAnswer
DROP

.macro getAddresPart
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
ENDS
CALLREF {
	CALL $getAddresPart_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	getAddresPart_internal
.type	getAddresPart_internal, @function
CALL $getAddresPart_internal_macro$

.macro getAddresPart_internal_macro
; function getAddresPart
PUSHINT 0
PUSHREF {
	.blob x67657474696e6720796f75722061646472657373
}
CALLREF {
	CALL $Terminal_no_obj_print_macro$
}
NULL
;; decl: pubkey
;; Remote call IDeAuditRoot.getParticipantAddress
;; push identifier DeAuditRoot
GETGLOB 16
PUSHSLICE x9260b4e4980a34c190b0174_
NEWC
STSLICE
STSLICE
PUSHINT 1
STUR 6
;; push identifier m_masterPubKey
GETGLOB 20
PUSHINT 0
NEWC
STSLICECONST 0
;; push identifier pubkey
PUSH S4
ISNULL
THROWIFNOT 64
STSLICECONST 0
;; push identifier now
NOW
;; uint64
STUR 64
PUSHINT 291
STUR 32
STSLICECONST x245b08ef
STU 32
STU 256
STBREFR
ENDC
PUSHINT 0
SENDRAWMSG
DROP
; end function getAddresPart

.macro SCgetAddresPart
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: value0
CALLREF {
	CALL $SCgetAddresPart_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	SCgetAddresPart_internal
.type	SCgetAddresPart_internal, @function
CALL $SCgetAddresPart_internal_macro$

.macro SCgetAddresPart_internal_macro
;; param: value0
; function SCgetAddresPart
; expValue
; end expValue
;; push identifier value0
DUP
; colValue
SETGLOB 17
; end colValue
PUSHINT 2098441039
NIL
NEWC
PUSHREFSLICE {
	.blob x67657474696e6720796f7572206164647265737320737563636573732c206164647265737320
}
CALLREF {
	CALL $storeStringInBuilders_macro$
}
;; push identifier m_participant
GETGLOB 17
CALLREF {
	CALL $convertAddressToHexString_macro$
}
CALLREF {
	CALL $assembleList_macro$
}
CALLREF {
	CALL $Terminal_no_obj_print_macro$
}
; end function SCgetAddresPart
DROP

.macro deploy_genAddr
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
ENDS
CALLREF {
	CALL $deploy_genAddr_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	deploy_genAddr_internal
.type	deploy_genAddr_internal, @function
CALL $deploy_genAddr_internal_macro$

.macro deploy_genAddr_internal_macro
; function deploy_genAddr
PUSHINT 0
PUSHREF {
	.blob x67657474696e67207061727469636970616e672061646472657373
}
CALLREF {
	CALL $Terminal_no_obj_print_macro$
}
NULL
;; decl: pubkey
;; Remote call IDeAuditRoot.getParticipantAddress
;; push identifier DeAuditRoot
GETGLOB 16
PUSHSLICE x9261ac57af9a34c190b0174_
NEWC
STSLICE
STSLICE
PUSHINT 1
STUR 6
;; push identifier m_masterPubKey
GETGLOB 20
PUSHINT 0
NEWC
STSLICECONST 0
;; push identifier pubkey
PUSH S4
ISNULL
THROWIFNOT 64
STSLICECONST 0
;; push identifier now
NOW
;; uint64
STUR 64
PUSHINT 291
STUR 32
STSLICECONST x245b08ef
STU 32
STU 256
STBREFR
ENDC
PUSHINT 0
SENDRAWMSG
DROP
; end function deploy_genAddr

.macro getParticipantAddressCallback
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: value0
CALLREF {
	CALL $getParticipantAddressCallback_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	getParticipantAddressCallback_internal
.type	getParticipantAddressCallback_internal, @function
CALL $getParticipantAddressCallback_internal_macro$

.macro getParticipantAddressCallback_internal_macro
;; param: value0
; function getParticipantAddressCallback
; expValue
; end expValue
;; push identifier value0
DUP
; colValue
SETGLOB 17
; end colValue
PUSHINT 0
NIL
NEWC
PUSHREFSLICE {
	.blob x6765745061727469636970616e744164647265737320737563636573732c20796f7572206164647265737320
}
CALLREF {
	CALL $storeStringInBuilders_macro$
}
;; push identifier m_participant
GETGLOB 17
CALLREF {
	CALL $convertAddressToHexString_macro$
}
PUSHREFSLICE {
	.blob x2c206e6f772073657420796f7572206769766572206164647265737320616e64207472616e7366657220313020746f6e20746f20766f74696e67526f6f7420617320726567697374726174696f6e206665653a20
}
CALLREF {
	CALL $storeStringInBuilders_macro$
}
;; push identifier DeAuditRoot
GETGLOB 16
CALLREF {
	CALL $convertAddressToHexString_macro$
}
CALLREF {
	CALL $assembleList_macro$
}
CALLREF {
	CALL $Terminal_no_obj_print_macro$
}
PUSHINT 827183851
PUSHREF {
	.blob x456e7465722067697665722061646472657373
}
CALLREF {
	CALL $AddressInput_no_obj_get_macro$
}
; end function getParticipantAddressCallback
DROP

.macro onGetGiverAddress
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: value
CALLREF {
	CALL $onGetGiverAddress_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	onGetGiverAddress_internal
.type	onGetGiverAddress_internal, @function
CALL $onGetGiverAddress_internal_macro$

.macro onGetGiverAddress_internal_macro
;; param: value
; function onGetGiverAddress
; expValue
; end expValue
;; push identifier value
DUP
; colValue
SETGLOB 30
; end colValue
NULL
;; decl: pubkey
;; Remote call IDeAuditRoot.setGiver
;; push identifier DeAuditRoot
GETGLOB 16
PUSHSLICE x92600000000234c190b0174_
NEWC
STSLICE
STSLICE
PUSHINT 1
STUR 6
;; push identifier giver
GETGLOB 30
NEWC
STSLICECONST 1
PUSHINT 512
STZEROES
;; push identifier pubkey
PUSH2 S3, S3
ISNULL
PUSHCONT {
	DROP
	STSLICECONST 0
}
PUSHCONT {
	SWAP
	STSLICECONST 1
	STU 256
}
IFELSE
;; push identifier now
NOW
;; uint64
STUR 64
PUSHINT 291
STUR 32
STSLICECONST x1b9c2362
SWAP
NEWC
STSLICE
STBREFR
STBREFR
ENDC
PUSHINT 0
SENDRAWMSG
CALLREF {
	CALL $setGiverSuccess_internal_macro$
}
; end function onGetGiverAddress
DROP2

.macro setGiverSuccess
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
ENDS
CALLREF {
	CALL $setGiverSuccess_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	setGiverSuccess_internal
.type	setGiverSuccess_internal, @function
CALL $setGiverSuccess_internal_macro$

.macro setGiverSuccess_internal_macro
; function setGiverSuccess
PUSHREF {
	.blob x436865636b696e6720726567697374726174696f6e20666565207061796564
}
PUSHREF {
	.blob x
}
PUSHINT 2
NEWDICT
PUSHREF {
	.blob x636865636b20706c73
}
PUSHREF {
	.blob x
}
PUSHINT 2102773688
TUPLE 3
CALLREF {
	UNTUPLE 3
	XCHG s2
	NEWC
	STREF
	STREF
	STU 32
}
PUSHINT 0
ROT
PUSHINT 32
DICTUSETB
PUSHREF {
	.blob x52657475726e20746f206d61696e206d656e75
}
PUSHREF {
	.blob x
}
PUSHINT 1260116821
TUPLE 3
CALLREF {
	UNTUPLE 3
	XCHG s2
	NEWC
	STREF
	STREF
	STU 32
}
PUSHINT 1
ROT
PUSHINT 32
DICTUSETB
PAIR
CALLREF {
	CALL $Menu_no_obj_select_macro$
}
; end function setGiverSuccess

.macro getBalanceOf
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
ENDS
;; param: index
CALLREF {
	CALL $getBalanceOf_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	getBalanceOf_internal
.type	getBalanceOf_internal, @function
CALL $getBalanceOf_internal_macro$

.macro getBalanceOf_internal_macro
;; param: index
; function getBalanceOf
NULL
;; decl: pubkey
;; Remote call IDeAuditRoot.balanceOf
;; push identifier DeAuditRoot
GETGLOB 16
PUSHSLICE x92622f6c350a34c190b0174_
NEWC
STSLICE
STSLICE
PUSHINT 1
STUR 6
NEWC
STSLICECONST 0
;; push identifier pubkey
PUSH S2
ISNULL
THROWIFNOT 64
STSLICECONST 0
;; push identifier now
NOW
;; uint64
STUR 64
PUSHINT 291
STUR 32
STSLICECONST x25c39616
STBREFR
ENDC
PUSHINT 0
SENDRAWMSG
; end function getBalanceOf
DROP2

.macro getBalanceOfSuccess
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDDICT
ENDS
;; param: value0
CALLREF {
	CALL $getBalanceOfSuccess_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	getBalanceOfSuccess_internal
.type	getBalanceOfSuccess_internal, @function
CALL $getBalanceOfSuccess_internal_macro$

.macro getBalanceOfSuccess_internal_macro
;; param: value0
; function getBalanceOfSuccess
; expValue
; end expValue
;; push identifier value0
DUP
; colValue
SETGLOB 22
; end colValue
;; map.exists
;; push identifier giver
GETGLOB 30
;; push identifier balances
GETGLOB 22
PUSHINT 267
DICTGET
DUP
PUSHCONT {
	NIP
}
IF
; expValue
; end expValue
; colValue
; end colValue
;; if
;; push identifier amot
DUP
SETGLOB 31
PUSHCONT {
	PUSHINT 0
	PUSHREF {
		.blob x74727565202d206465706c6f792063616c6c206e6f77
	}
	CALLREF {
		CALL $Terminal_no_obj_print_macro$
	}
	CALLREF {
		CALL $deployCall_internal_macro$
	}
}
PUSHCONT {
	PUSHINT 0
	PUSHREF {
		.blob x62616c616e63654f66206e6f742066696c6c6564207769746820796f7572206769766572207965742c2074727920616761696e
	}
	CALLREF {
		CALL $Terminal_no_obj_print_macro$
	}
	CALLREF {
		CALL $setGiverSuccess_internal_macro$
	}
}
IFELSE
;; end if
; end function getBalanceOfSuccess
DROP

.macro deployCall
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
ENDS
CALLREF {
	CALL $deployCall_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	deployCall_internal
.type	deployCall_internal, @function
CALL $deployCall_internal_macro$

.macro deployCall_internal_macro
; function deployCall
PUSHINT 0
PUSHREF {
	.blob x6465706c6f792063616c6c
}
CALLREF {
	CALL $Terminal_no_obj_print_macro$
}
NULL
;; decl: pubkey
;; Remote call IDeAuditRoot.deployParticipant
;; push identifier DeAuditRoot
GETGLOB 16
PUSHSLICE x9262ef00a95a34c190b0174_
NEWC
STSLICE
STSLICE
PUSHINT 1
STUR 6
;; push identifier m_masterPubKey
GETGLOB 20
NEWC
STSLICECONST 1
PUSHINT 512
STZEROES
;; push identifier pubkey
PUSH2 S3, S3
ISNULL
PUSHCONT {
	DROP
	STSLICECONST 0
}
PUSHCONT {
	SWAP
	STSLICECONST 1
	STU 256
}
IFELSE
;; push identifier now
NOW
;; uint64
STUR 64
PUSHINT 291
STUR 32
STSLICECONST x27fe2d9a
SWAP
NEWC
STU 256
STBREFR
STBREFR
ENDC
PUSHINT 0
SENDRAWMSG
DROP
; end function deployCall

.macro deployParticipantSuccess
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
LDIQ 1
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDI 1
}
IFNOT
ENDS
;; param: deployedAddress
;; param: statusDeploy
CALLREF {
	CALL $deployParticipantSuccess_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	deployParticipantSuccess_internal
.type	deployParticipantSuccess_internal, @function
CALL $deployParticipantSuccess_internal_macro$

.macro deployParticipantSuccess_internal_macro
;; param: deployedAddress
;; param: statusDeploy
; function deployParticipantSuccess
; expValue
; end expValue
;; push identifier deployedAddress
PUSH S1
; colValue
PUSHINT 32
SETGLOBVAR
; end colValue
PUSHINT 0
NIL
NEWC
PUSHREFSLICE {
	.blob x53756363657373206465706c6f7965642e20676f696e6720746f206d656d626572734d656e752c206465706c6f79656441646472657373202d20
}
CALLREF {
	CALL $storeStringInBuilders_macro$
}
;; push identifier dp
PUSHINT 32
GETGLOBVAR
CALLREF {
	CALL $convertAddressToHexString_macro$
}
CALLREF {
	CALL $assembleList_macro$
}
CALLREF {
	CALL $Terminal_no_obj_print_macro$
}
CALLREF {
	CALL $membersMenu_internal_macro$
}
; end function deployParticipantSuccess
DROP2

.macro membersMenu
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
ENDS
CALLREF {
	CALL $membersMenu_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	membersMenu_internal
.type	membersMenu_internal, @function
CALL $membersMenu_internal_macro$

.macro membersMenu_internal_macro
; function membersMenu
PUSHREF {
	.blob x416374696f6e205465616d206d656e75
}
PUSHREF {
	.blob x
}
PUSHINT 4
NEWDICT
PUSHREF {
	.blob x416374696f6e207465616d
}
PUSHREF {
	.blob x
}
PUSHINT 212884318
TUPLE 3
CALLREF {
	UNTUPLE 3
	XCHG s2
	NEWC
	STREF
	STREF
	STU 32
}
PUSHINT 0
ROT
PUSHINT 32
DICTUSETB
PUSHREF {
	.blob x
}
PUSHREF {
	.blob x436f6c6c61746f72
}
PUSHINT 1511497787
TUPLE 3
CALLREF {
	UNTUPLE 3
	XCHG s2
	NEWC
	STREF
	STREF
	STU 32
}
PUSHINT 1
ROT
PUSHINT 32
DICTUSETB
PUSHREF {
	.blob x72657475726e20746f206d61696e206d656e75
}
PUSHREF {
	.blob x
}
PUSHINT 1260116821
TUPLE 3
CALLREF {
	UNTUPLE 3
	XCHG s2
	NEWC
	STREF
	STREF
	STU 32
}
PUSHINT 2
ROT
PUSHINT 32
DICTUSETB
PUSHREF {
	.blob x51756974
}
PUSHREF {
	.blob x
}
PUSHINT 0
TUPLE 3
CALLREF {
	UNTUPLE 3
	XCHG s2
	NEWC
	STREF
	STREF
	STU 32
}
PUSHINT 3
ROT
PUSHINT 32
DICTUSETB
PAIR
CALLREF {
	CALL $Menu_no_obj_select_macro$
}
; end function membersMenu

.macro goToCLdebot
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
ENDS
CALLREF {
	CALL $goToCLdebot_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	goToCLdebot_internal
.type	goToCLdebot_internal, @function
CALL $goToCLdebot_internal_macro$

.macro goToCLdebot_internal_macro
; function goToCLdebot
;; Remote call IVotingAuditDebotCL.preStart
;; push identifier m_participant
GETGLOB 17
;; push identifier m_CLdebAddress
GETGLOB 15
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x3989680000000000000000000000000003_
STSLICER
SWAP
NEWC
STSLICECONST x3668559a
STSLICE
STBREFR
ENDC
PUSHINT 0
SENDRAWMSG
; end function goToCLdebot

.macro isActionTeamMemberCheck
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
ENDS
;; param: index
CALLREF {
	CALL $isActionTeamMemberCheck_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	isActionTeamMemberCheck_internal
.type	isActionTeamMemberCheck_internal, @function
CALL $isActionTeamMemberCheck_internal_macro$

.macro isActionTeamMemberCheck_internal_macro
;; param: index
; function isActionTeamMemberCheck
NULL
;; decl: pubkey
;; Remote call IDeAuditRoot.isActionTeamMember
;; push identifier DeAuditRoot
GETGLOB 16
PUSHSLICE x9262e618fc1234c190b0174_
NEWC
STSLICE
STSLICE
PUSHINT 1
STUR 6
;; push identifier m_participant
GETGLOB 17
NEWC
STSLICECONST 0
;; push identifier pubkey
PUSH S3
ISNULL
THROWIFNOT 64
STSLICECONST 0
;; push identifier now
NOW
;; uint64
STUR 64
PUSHINT 291
STUR 32
STSLICECONST x58175f7d
STSLICE
STBREFR
ENDC
PUSHINT 0
SENDRAWMSG
; end function isActionTeamMemberCheck
DROP2

.macro SCcheckACTM
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDI 1
ENDS
;; param: status
CALLREF {
	CALL $SCcheckACTM_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	SCcheckACTM_internal
.type	SCcheckACTM_internal, @function
CALL $SCcheckACTM_internal_macro$

.macro SCcheckACTM_internal_macro
;; param: status
; function SCcheckACTM
;; if
;; push identifier status
DUP
PUSHCONT {
	CALLREF {
		CALL $enterATMdebot_internal_macro$
	}
}
PUSHCONT {
	PUSHINT 0
	PUSHREF {
		.blob x796f752068617665206e6f207065726d697373696f6e
	}
	CALLREF {
		CALL $Terminal_no_obj_print_macro$
	}
	CALLREF {
		CALL $membersMenu_internal_macro$
	}
}
IFELSE
;; end if
; end function SCcheckACTM
DROP

.macro enterATMdebot
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
ENDS
CALLREF {
	CALL $enterATMdebot_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	enterATMdebot_internal
.type	enterATMdebot_internal, @function
CALL $enterATMdebot_internal_macro$

.macro enterATMdebot_internal_macro
; function enterATMdebot
;; Remote call IVotingAuditDebotACTMmenu.preStart
;; push identifier m_participant
GETGLOB 17
;; push identifier m_ATdebAddress
GETGLOB 14
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x3989680000000000000000000000000003_
STSLICER
SWAP
NEWC
STSLICECONST x3668559a
STSLICE
STBREFR
ENDC
PUSHINT 0
SENDRAWMSG
; end function enterATMdebot

.macro someError
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
LDU 32
ENDS
;; param: sdkError
;; param: exitCode
CALLREF {
	CALL $someError_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	someError_internal
.type	someError_internal, @function
CALL $someError_internal_macro$

.macro someError_internal_macro
;; param: sdkError
;; param: exitCode
; function someError
PUSHINT 0
NIL
NEWC
PUSHSLICE x73646b4572726f723a20
CALLREF {
	CALL $storeStringInBuilders_macro$
}
;; push identifier sdkError
PUSH S4
PUSHINT 0
FALSE
FALSE
CALLREF {
	CALL $convertIntToDecStr_macro$
}
PUSHSLICE x0a65786974434f64653a
CALLREF {
	CALL $storeStringInBuilders_macro$
}
;; push identifier exitCode
PUSH S3
PUSHINT 0
FALSE
FALSE
CALLREF {
	CALL $convertIntToDecStr_macro$
}
CALLREF {
	CALL $assembleList_macro$
}
CALLREF {
	CALL $Terminal_no_obj_print_macro$
}
PUSHINT 1
PUSHREF {
	.blob x4261636b20746f206d656e752e2e2e
}
CALLREF {
	CALL $Terminal_no_obj_print_macro$
}
; end function someError
DROP2

.macro getDebotInfo
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
ENDS
CALLREF {
	CALL $getDebotInfo_internal_macro$
}
;; emitting 10 value(s)
PUSH S10
PUSHCONT {
	PUSH S12
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 1
	STUR 98
	REVERSE 10, 1
	BLKSWAP 10, 1
	NEWC
	STSLICECONST x00000deb
	STREF
	STREF
	STREF
	BLKSWAP 7, 1
	NEWC
	STREF
	STREF
	STSLICE
	STREF
	BLKSWAP 3, 1
	NEWC
	STREF
	STREF
	STREF
	STBREFR
	STBREFR
	STBREFR
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	BLKDROP 10
}
IFELSE
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	getDebotInfo_internal
.type	getDebotInfo_internal, @function
CALL $getDebotInfo_internal_macro$

.macro getDebotInfo_internal_macro
;; ret param: name
PUSHREF {
}
;; ret param: version
PUSHREF {
}
;; ret param: publisher
PUSHREF {
}
;; ret param: caption
PUSHREF {
}
;; ret param: author
PUSHREF {
}
;; ret param: support
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
;; ret param: hello
PUSHREF {
}
;; ret param: language
PUSHREF {
}
;; ret param: dabi
PUSHREF {
}
;; ret param: icon
PUSHREF {
}
; function getDebotInfo
; expValue
; end expValue
PUSHREF {
	.blob x52616469616e636520566f74696e67204175646974204465426f74202d20436f7265
}
; colValue
POP S10
; end colValue
; expValue
; end expValue
PUSHREF {
	.blob x302e312e30
}
; colValue
POP S9
; end colValue
; expValue
; end expValue
PUSHREF {
	.blob x52616469616e6365205465616d
}
; colValue
POP S8
; end colValue
; expValue
; end expValue
PUSHREF {
	.blob x4465426f7420666f7220446541756469742062792052616469616e6365205465616d
}
; colValue
POP S7
; end colValue
; expValue
; end expValue
PUSHREF {
	.blob x52616469616e6365205465616d
}
; colValue
POP S6
; end colValue
;; address.makeAddrStd()
PUSHSLICE x801082511da76abb39b5f500d00fe05415c182d354bdbfd114f134c904852ead529_
; expValue
; end expValue
; colValue
POP S5
; end colValue
; expValue
; end expValue
PUSHREF {
	.blob x546861742773206465626f7420666f7220566f74696e672041756469742e20446576656c6f7065642062792052616469616e6365205465616d
}
; colValue
POP S4
; end colValue
; expValue
; end expValue
PUSHREF {
	.blob x656e
}
; colValue
POP S3
; end colValue
;; push identifier m_debotAbi
GETGLOB 11
DUP
ISNULL
THROWIF 63
; expValue
; end expValue
; colValue
POP S2
; end colValue
; expValue
; end expValue
;; push identifier m_icon
; colValue
DROP
GETGLOB 18
; end colValue
; end function getDebotInfo

.macro getRequiredInterfaces
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
ENDS
CALLREF {
	CALL $getRequiredInterfaces_internal_macro$
}
;; emitting 1 value(s)
PUSH S1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x00000000000000000000000036190b42a_
	STSLICER
	SWAP
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	DROP
}
IFELSE
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	getRequiredInterfaces_internal
.type	getRequiredInterfaces_internal, @function
CALL $getRequiredInterfaces_internal_macro$

.macro getRequiredInterfaces_internal_macro
;; ret param: interfaces
PUSHINT 0
NEWDICT
PAIR
; function getRequiredInterfaces
;; return
PUSHINT 1
NEWDICT
PUSHINT 61327837143279038880828163389518064523935669597243029312953519799871119370467
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 32
DICTUSETB
PAIR
NIP
; end function getRequiredInterfaces

.macro getDebotOptions
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
ENDS
CALLREF {
	CALL $getDebotOptions_internal_macro$
}
;; emitting 4 value(s)
PUSH S4
PUSHCONT {
	PUSH S6
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 1
	STUR 98
	REVERSE 4, 1
	BLKSWAP 4, 1
	NEWC
	STSLICECONST xfdecd0db
	STU 8
	STREF
	STREF
	STSLICE
	STBREFR
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	BLKDROP 4
}
IFELSE
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	getDebotOptions_internal
.type	getDebotOptions_internal, @function
CALL $getDebotOptions_internal_macro$

.macro getDebotOptions_internal_macro
;; ret param: options
PUSHINT 0
;; ret param: debotAbi
PUSHREF {
}
;; ret param: targetAbi
PUSHREF {
}
;; ret param: targetAddr
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
; function getDebotOptions
;; push identifier m_debotAbi
GETGLOB 11
ISNULL
NOT
PUSHCONT {
	;; push identifier m_debotAbi
	GETGLOB 11
	DUP
	ISNULL
	THROWIF 63
}
PUSHCONT {
	PUSHREF {
		.blob x
	}
}
IFELSE
; expValue
; end expValue
; colValue
POP S3
; end colValue
;; push identifier m_targetAbi
GETGLOB 12
ISNULL
NOT
PUSHCONT {
	;; push identifier m_targetAbi
	GETGLOB 12
	DUP
	ISNULL
	THROWIF 63
}
PUSHCONT {
	PUSHREF {
		.blob x
	}
}
IFELSE
; expValue
; end expValue
; colValue
POP S2
; end colValue
;; push identifier m_target
GETGLOB 13
ISNULL
NOT
PUSHCONT {
	;; push identifier m_target
	GETGLOB 13
	DUP
	ISNULL
	THROWIF 63
}
PUSHCONT {
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
}
IFELSE
; expValue
; end expValue
; colValue
NIP
; end colValue
; expValue
; end expValue
;; push identifier m_options
GETGLOB 10
; colValue
POP S4
; end colValue
; end function getDebotOptions

.macro setABI
DROP
GETGLOB 8
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDREF
ENDS
;; param: dabi
CALLREF {
	CALL $setABI_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	setABI_internal
.type	setABI_internal, @function
CALL $setABI_internal_macro$

.macro setABI_internal_macro
;; param: dabi
; function setABI
GETGLOB 2
;; ==
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
EQUAL
THROWIFNOT 100
ACCEPT
; expValue
;; fetch m_options
; end expValue
GETGLOB 10
PUSHINT 1
OR
; colValue
SETGLOB 10
; end colValue
; expValue
; end expValue
;; push identifier dabi
; colValue
; end colValue
; end function setABI
SETGLOB 11

.macro c7_to_c4
PUSHINT 32
GETGLOBVAR
GETGLOB 31
GETGLOB 30
GETGLOB 29
GETGLOB 28
GETGLOB 27
GETGLOB 26
GETGLOB 25
GETGLOB 24
GETGLOB 23
GETGLOB 22
GETGLOB 21
GETGLOB 20
GETGLOB 19
GETGLOB 18
GETGLOB 17
GETGLOB 16
GETGLOB 15
GETGLOB 14
GETGLOB 13
GETGLOB 12
GETGLOB 11
GETGLOB 10
GETGLOB 6
GETGLOB 3
GETGLOB 2
NEWC
STU 256
STU 64
STU 1
STU 8
SWAP
DUP
ISNULL
PUSHCONT {
	DROP
	STSLICECONST 0
}
PUSHCONT {
	NEWC
	STREF
	SWAP
	STSLICECONST 1
	STBREF
}
IFELSE
SWAP
DUP
ISNULL
PUSHCONT {
	DROP
	STSLICECONST 0
}
PUSHCONT {
	NEWC
	STREF
	SWAP
	STSLICECONST 1
	STBREF
}
IFELSE
SWAP
DUP
ISNULL
PUSHCONT {
	DROP
	STSLICECONST 0
}
PUSHCONT {
	NEWC
	STSLICE
	SWAP
	STSLICECONST 1
	STBREF
}
IFELSE
STSLICE
PUSHINT 18
PUSHINT 1
BLKSWX
NEWC
STSLICE
PUSHINT 17
PUSHINT 1
BLKSWX
NEWC
STSLICE
BLKSWAP 16, 1
NEWC
STSLICE
STREF
STREF
STU 256
BLKSWAP 12, 1
NEWC
STU 256
STDICT
STDICT
SWAP
UNPAIR
XCHG s2
STU 32
STDICT
BLKSWAP 8, 1
NEWC
STDICT
SWAP
UNPAIR
XCHG s2
STU 32
STDICT
STSLICE
BLKSWAP 5, 1
NEWC
STSLICE
BLKSWAP 4, 1
NEWC
STSLICE
BLKSWAP 3, 1
NEWC
STSLICE
STI 1
SWAP
NEWC
STSLICE
STBREFR
STBREFR
STBREFR
STBREFR
STBREFR
STBREFR
STBREFR
STBREFR
STBREFR
ENDC
POP C4

.macro c4_to_c7
PUSHROOT
CTOS        ; c4
LDU 256      ; pubkey c4
LDU 64      ; pubkey timestamp c4
LDU 1       ; pubkey [timestamp] constructor_flag memory
LDU 8
LDOPTREF
SWAP
DUP
ISNULL
PUSHCONT {
	CTOS
	PLDREF
}
IFNOT
SWAP
LDOPTREF
SWAP
DUP
ISNULL
PUSHCONT {
	CTOS
	PLDREF
}
IFNOT
SWAP
LDOPTREF
SWAP
DUP
ISNULL
PUSHCONT {
	CTOS
	LDMSGADDR
	DROP
}
IFNOT
SWAP
LDMSGADDR
;; load next cell
LDREF
ENDS
CTOS
LDMSGADDR
;; load next cell
LDREF
ENDS
CTOS
LDMSGADDR
;; load next cell
LDREF
ENDS
CTOS
LDMSGADDR
LDREF
LDREF
LDU 256
;; load next cell
LDREF
ENDS
CTOS
LDU 256
LDDICT
LDDICT
LDU 32
LDDICT
ROTREV
PAIR
SWAP
;; load next cell
LDREF
ENDS
CTOS
LDDICT
LDU 32
LDDICT
ROTREV
PAIR
SWAP
LDMSGADDR
;; load next cell
LDREF
ENDS
CTOS
LDMSGADDR
;; load next cell
LDREF
ENDS
CTOS
LDMSGADDR
;; load next cell
LDREF
ENDS
CTOS
LDMSGADDR
LDI 1
;; load next cell
LDREF
ENDS
CTOS
LDMSGADDR
ENDS
PUSHINT 32
SETGLOBVAR
SETGLOB 31
SETGLOB 30
SETGLOB 29
SETGLOB 28
SETGLOB 27
SETGLOB 26
SETGLOB 25
SETGLOB 24
SETGLOB 23
SETGLOB 22
SETGLOB 21
SETGLOB 20
SETGLOB 19
SETGLOB 18
SETGLOB 17
SETGLOB 16
SETGLOB 15
SETGLOB 14
SETGLOB 13
SETGLOB 12
SETGLOB 11
SETGLOB 10
TRUE
SETGLOB 8
; pubkey [timestamp] constructor_flag
SETGLOB 6   ; pubkey [timestamp]
SETGLOB 3   ; D
SETGLOB 2

.macro c4_to_c7_with_init_storage
PUSHROOT
CTOS        ; c4
DUP        ; c4 c4
SBITS      ; c4 bits
GTINT 1    ; c4 bits>1
PUSHCONT {
	LDU 256      ; pubkey c4
	LDU 64      ; pubkey timestamp c4
	LDU 1       ; pubkey [timestamp] constructor_flag memory
	LDU 8
	LDOPTREF
	SWAP
	DUP
	ISNULL
	PUSHCONT {
		CTOS
		PLDREF
	}
	IFNOT
	SWAP
	LDOPTREF
	SWAP
	DUP
	ISNULL
	PUSHCONT {
		CTOS
		PLDREF
	}
	IFNOT
	SWAP
	LDOPTREF
	SWAP
	DUP
	ISNULL
	PUSHCONT {
		CTOS
		LDMSGADDR
		DROP
	}
	IFNOT
	SWAP
	LDMSGADDR
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
	LDREF
	LDREF
	LDU 256
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
	LDDICT
	LDDICT
	LDU 32
	LDDICT
	ROTREV
	PAIR
	SWAP
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDDICT
	LDU 32
	LDDICT
	ROTREV
	PAIR
	SWAP
	LDMSGADDR
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
	LDI 1
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
	ENDS
	PUSHINT 32
	SETGLOBVAR
	SETGLOB 31
	SETGLOB 30
	SETGLOB 29
	SETGLOB 28
	SETGLOB 27
	SETGLOB 26
	SETGLOB 25
	SETGLOB 24
	SETGLOB 23
	SETGLOB 22
	SETGLOB 21
	SETGLOB 20
	SETGLOB 19
	SETGLOB 18
	SETGLOB 17
	SETGLOB 16
	SETGLOB 15
	SETGLOB 14
	SETGLOB 13
	SETGLOB 12
	SETGLOB 11
	SETGLOB 10
	TRUE
	SETGLOB 8
	; pubkey [timestamp] constructor_flag
	SETGLOB 6   ; pubkey [timestamp]
	SETGLOB 3   ; D
	SETGLOB 2
}
PUSHCONT {
	PLDDICT   ; D
	; init m_options
	PUSHINT 0
	SETGLOB 10
	; init m_debotAbi
	NULL
	SETGLOB 11
	; init m_targetAbi
	NULL
	SETGLOB 12
	; init m_target
	NULL
	SETGLOB 13
	; init m_ATdebAddress
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 14
	; init m_CLdebAddress
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 15
	; init DeAuditRoot
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 16
	; init m_participant
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 17
	; init m_icon
	PUSHREF {
	}
	SETGLOB 18
	; init m_seedphrase
	PUSHREF {
	}
	SETGLOB 19
	; init m_masterPubKey
	PUSHINT 0
	SETGLOB 20
	; init m_masterSecKey
	PUSHINT 0
	SETGLOB 21
	; init balances
	NEWDICT
	SETGLOB 22
	; init DeAudits
	NEWDICT
	SETGLOB 23
	; init keysDeAuditD
	PUSHINT 0
	NEWDICT
	PAIR
	SETGLOB 24
	; init voteD
	NEWDICT
	SETGLOB 25
	; init voteKeysD
	PUSHINT 0
	NEWDICT
	PAIR
	SETGLOB 26
	; init cureDA
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 27
	; init curDataDeAudit
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 28
	; init curTokenDeAudit
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 29
	; init giver
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 30
	; init amot
	PUSHINT 0
	SETGLOB 31
	; init dp
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	PUSHINT 32
	SETGLOBVAR
	; set contract pubkey
	PUSHINT 0
	SWAP
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
	PUSHINT 0 ; constructor_flag
	SETGLOB 6
TRUE
SETGLOB 8
	;; init state var: DeAuditRoot
	;; address.makeAddrStd()
	PUSHSLICE x80193b037653b97bea63b6446a49db1cb7b915e40e6201c53b012ce16a85856a045_
	SETGLOB 16
	;; init state var: m_participant
	;; address.makeAddrStd()
	PUSHSLICE x8013e50fe86abfd61a5b09947ff10325016622c36648c90d947f8cfaef29371f0bf_
	SETGLOB 17
}
IFELSE

.internal-alias :main_internal, 0
.internal :main_internal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main_internal
;; param: contract_balance
;; param: msg_balance
;; param: int_msg_info
;; param: msg_body_slice
;; param: transaction_type
PUSH S2
CTOS
LDU 4       ; bounced tail
LDMSGADDR   ; bounced src tail
DROP
SETGLOB 9
MODPOW2 1
IFRET
PUSH S1    ; body
SEMPTY     ; isEmpty
IFRET
PUSH S1 ; body
LDUQ 32  ; [funcId] body' ok
THROWIFNOT 60 ; funcId body'
PUSH S1 ; funcId body' funcId
IFNOTRET
SWAP
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
THROWIF 60

.internal-alias :main_external, -1
.internal :main_external
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 9
PUSH S1
CALLREF {
	CALL $c4_to_c7_with_init_storage$
}
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHINT 512
	LDSLICEX ; signatureSlice msgSlice
	DUP      ; signatureSlice msgSlice msgSlice
	HASHSU   ; signatureSlice msgSlice hashMsgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice
	LDU 1 ; signatureSlice hashMsgSlice havePubkey msgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice havePubkey
	PUSHCONT {
		LDU 256       ; signatureSlice hashMsgSlice pubkey msgSlice
		XCHG s3
		SWAP
	}
	PUSHCONT {
		XCHG s2
		GETGLOB 2
	}
	IFELSE
	DUP
	SETGLOB 5
	CHKSIGNU      ; msgSlice isSigned
	THROWIFNOT 40 ; msgSlice
}
PUSHCONT {
	LDU 1      ; havePubkey msgSlice
	SWAP       ; msgSlice havePubkey
	THROWIF 58 ; msgSlice
}
IFELSE
LDU 64                         ; timestamp msgSlice
SWAP                           ; msgSlice timestamp
CALL $replay_protection_macro$ ; msgSlice
LDU 32  ; expireAt msgSlice
SWAP    ; msgSlice expireAt
NOW     ; msgSlice expireAt now
GREATER ; msgSlice expireAt>now
THROWIFNOT 57
LDU  32 ; funcId body
SWAP    ; body funcId
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
THROWIF 60

.globl	AddressInput_with_obj_get
.type	AddressInput_with_obj_get, @function
CALL $AddressInput_with_obj_get_macro$

.macro AddressInput_with_obj_get_macro
;; param: answerId
;; param: prompt
; function get
;; address.makeAddrStd()
PUSHSLICE x9c3afda37b1cc4610e222de8a45cb1be15278aa418ade95bc47de7b12335308ca77_
;; decl: addr
;; Remote call IAddressInput.get
;; push identifier prompt
;; push identifier answerId
;; push identifier addr
PUSH3 S1, S2, S0
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x3989680000000000000000000000000000421b400b_
STSLICER
STU 32
STREF
ENDC
PUSHINT 0
SENDRAWMSG
; end function get
DROP2

.globl	AddressInput_no_obj_get
.type	AddressInput_no_obj_get, @function
CALL $AddressInput_no_obj_get_macro$

.macro AddressInput_no_obj_get_macro
;; param: answerId
;; param: prompt
; function get
;; address.makeAddrStd()
PUSHSLICE x9c3afda37b1cc4610e222de8a45cb1be15278aa418ade95bc47de7b12335308ca77_
;; decl: addr
;; Remote call IAddressInput.get
;; push identifier prompt
;; push identifier answerId
;; push identifier addr
PUSH3 S1, S2, S0
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x3989680000000000000000000000000000421b400b_
STSLICER
STU 32
STREF
ENDC
PUSHINT 0
SENDRAWMSG
; end function get
BLKDROP 3

.globl	ConfirmInput_with_obj_get
.type	ConfirmInput_with_obj_get, @function
CALL $ConfirmInput_with_obj_get_macro$

.macro ConfirmInput_with_obj_get_macro
;; param: answerId
;; param: prompt
; function get
;; address.makeAddrStd()
PUSHSLICE x9c22cca7d5e6992428ce241e4d0ba84bff2c7b6b976b54ced4c545c677f87ed0515_
;; decl: addr
;; Remote call IConfirmInput.get
;; push identifier prompt
;; push identifier answerId
;; push identifier addr
PUSH3 S1, S2, S0
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x3989680000000000000000000000000000869219e5_
STSLICER
STU 32
STREF
ENDC
PUSHINT 0
SENDRAWMSG
; end function get
DROP2

.globl	ConfirmInput_no_obj_get
.type	ConfirmInput_no_obj_get, @function
CALL $ConfirmInput_no_obj_get_macro$

.macro ConfirmInput_no_obj_get_macro
;; param: answerId
;; param: prompt
; function get
;; address.makeAddrStd()
PUSHSLICE x9c22cca7d5e6992428ce241e4d0ba84bff2c7b6b976b54ced4c545c677f87ed0515_
;; decl: addr
;; Remote call IConfirmInput.get
;; push identifier prompt
;; push identifier answerId
;; push identifier addr
PUSH3 S1, S2, S0
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x3989680000000000000000000000000000869219e5_
STSLICER
STU 32
STREF
ENDC
PUSHINT 0
SENDRAWMSG
; end function get
BLKDROP 3

.globl	Menu_with_obj_select
.type	Menu_with_obj_select, @function
CALL $Menu_with_obj_select_macro$

.macro Menu_with_obj_select_macro
;; param: title
;; param: description
;; param: items
; function select
;; address.makeAddrStd()
PUSHSLICE x9c358349a7d9d4465c92f07be94475030479b94640bb8b19a4189b64b384ac0b691_
;; decl: addr
;; Remote call IMenu.select
;; push identifier items
;; push identifier description
;; push identifier title
PUSH3 S1, S2, S3
;; push identifier addr
PUSH S3
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x3989680000000000000000000000000000d3028c73_
STSLICER
STREF
STREF
SWAP
UNPAIR
XCHG s2
STU 32
STDICT
ENDC
PUSHINT 0
SENDRAWMSG
; end function select
BLKDROP 3

.globl	Menu_no_obj_select
.type	Menu_no_obj_select, @function
CALL $Menu_no_obj_select_macro$

.macro Menu_no_obj_select_macro
;; param: title
;; param: description
;; param: items
; function select
;; address.makeAddrStd()
PUSHSLICE x9c358349a7d9d4465c92f07be94475030479b94640bb8b19a4189b64b384ac0b691_
;; decl: addr
;; Remote call IMenu.select
;; push identifier items
;; push identifier description
;; push identifier title
PUSH3 S1, S2, S3
;; push identifier addr
PUSH S3
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x3989680000000000000000000000000000d3028c73_
STSLICER
STREF
STREF
SWAP
UNPAIR
XCHG s2
STU 32
STDICT
ENDC
PUSHINT 0
SENDRAWMSG
; end function select
BLKDROP 4

.globl	Sdk_with_obj_mnemonicFromRandom
.type	Sdk_with_obj_mnemonicFromRandom, @function
CALL $Sdk_with_obj_mnemonicFromRandom_macro$

.macro Sdk_with_obj_mnemonicFromRandom_macro
;; param: answerId
;; param: dict
;; param: wordCount
; function mnemonicFromRandom
;; address.makeAddrStd()
PUSHSLICE x9c31f8c8a9f200e593e3eda66275c2c11ec9e940cc18d5d3e858d16d4f3c5437897_
;; decl: addr
;; Remote call ISdk.mnemonicFromRandom
;; push identifier wordCount
;; push identifier dict
;; push identifier answerId
PUSH3 S1, S2, S3
;; push identifier addr
PUSH S3
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x39896800000000000000000000000000005e452279_
STSLICER
STU 32
STU 32
STU 32
ENDC
PUSHINT 0
SENDRAWMSG
; end function mnemonicFromRandom
BLKDROP 3

.globl	Sdk_no_obj_mnemonicFromRandom
.type	Sdk_no_obj_mnemonicFromRandom, @function
CALL $Sdk_no_obj_mnemonicFromRandom_macro$

.macro Sdk_no_obj_mnemonicFromRandom_macro
;; param: answerId
;; param: dict
;; param: wordCount
; function mnemonicFromRandom
;; address.makeAddrStd()
PUSHSLICE x9c31f8c8a9f200e593e3eda66275c2c11ec9e940cc18d5d3e858d16d4f3c5437897_
;; decl: addr
;; Remote call ISdk.mnemonicFromRandom
;; push identifier wordCount
;; push identifier dict
;; push identifier answerId
PUSH3 S1, S2, S3
;; push identifier addr
PUSH S3
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x39896800000000000000000000000000005e452279_
STSLICER
STU 32
STU 32
STU 32
ENDC
PUSHINT 0
SENDRAWMSG
; end function mnemonicFromRandom
BLKDROP 4

.globl	Sdk_with_obj_mnemonicVerify
.type	Sdk_with_obj_mnemonicVerify, @function
CALL $Sdk_with_obj_mnemonicVerify_macro$

.macro Sdk_with_obj_mnemonicVerify_macro
;; param: answerId
;; param: phrase
; function mnemonicVerify
;; address.makeAddrStd()
PUSHSLICE x9c31f8c8a9f200e593e3eda66275c2c11ec9e940cc18d5d3e858d16d4f3c5437897_
;; decl: addr
;; Remote call ISdk.mnemonicVerify
;; push identifier phrase
;; push identifier answerId
;; push identifier addr
PUSH3 S1, S2, S0
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x3989680000000000000000000000000000235cb5c3_
STSLICER
STU 32
STREF
ENDC
PUSHINT 0
SENDRAWMSG
; end function mnemonicVerify
DROP2

.globl	Sdk_no_obj_mnemonicVerify
.type	Sdk_no_obj_mnemonicVerify, @function
CALL $Sdk_no_obj_mnemonicVerify_macro$

.macro Sdk_no_obj_mnemonicVerify_macro
;; param: answerId
;; param: phrase
; function mnemonicVerify
;; address.makeAddrStd()
PUSHSLICE x9c31f8c8a9f200e593e3eda66275c2c11ec9e940cc18d5d3e858d16d4f3c5437897_
;; decl: addr
;; Remote call ISdk.mnemonicVerify
;; push identifier phrase
;; push identifier answerId
;; push identifier addr
PUSH3 S1, S2, S0
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x3989680000000000000000000000000000235cb5c3_
STSLICER
STU 32
STREF
ENDC
PUSHINT 0
SENDRAWMSG
; end function mnemonicVerify
BLKDROP 3

.globl	Sdk_with_obj_hdkeyXprvFromMnemonic
.type	Sdk_with_obj_hdkeyXprvFromMnemonic, @function
CALL $Sdk_with_obj_hdkeyXprvFromMnemonic_macro$

.macro Sdk_with_obj_hdkeyXprvFromMnemonic_macro
;; param: answerId
;; param: phrase
; function hdkeyXprvFromMnemonic
;; address.makeAddrStd()
PUSHSLICE x9c31f8c8a9f200e593e3eda66275c2c11ec9e940cc18d5d3e858d16d4f3c5437897_
;; decl: addr
;; Remote call ISdk.hdkeyXprvFromMnemonic
;; push identifier phrase
;; push identifier answerId
;; push identifier addr
PUSH3 S1, S2, S0
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x398968000000000000000000000000000062836027_
STSLICER
STU 32
STREF
ENDC
PUSHINT 0
SENDRAWMSG
; end function hdkeyXprvFromMnemonic
DROP2

.globl	Sdk_no_obj_hdkeyXprvFromMnemonic
.type	Sdk_no_obj_hdkeyXprvFromMnemonic, @function
CALL $Sdk_no_obj_hdkeyXprvFromMnemonic_macro$

.macro Sdk_no_obj_hdkeyXprvFromMnemonic_macro
;; param: answerId
;; param: phrase
; function hdkeyXprvFromMnemonic
;; address.makeAddrStd()
PUSHSLICE x9c31f8c8a9f200e593e3eda66275c2c11ec9e940cc18d5d3e858d16d4f3c5437897_
;; decl: addr
;; Remote call ISdk.hdkeyXprvFromMnemonic
;; push identifier phrase
;; push identifier answerId
;; push identifier addr
PUSH3 S1, S2, S0
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x398968000000000000000000000000000062836027_
STSLICER
STU 32
STREF
ENDC
PUSHINT 0
SENDRAWMSG
; end function hdkeyXprvFromMnemonic
BLKDROP 3

.globl	Sdk_with_obj_hdkeyDeriveFromXprvPath
.type	Sdk_with_obj_hdkeyDeriveFromXprvPath, @function
CALL $Sdk_with_obj_hdkeyDeriveFromXprvPath_macro$

.macro Sdk_with_obj_hdkeyDeriveFromXprvPath_macro
;; param: answerId
;; param: inXprv
;; param: path
; function hdkeyDeriveFromXprvPath
;; address.makeAddrStd()
PUSHSLICE x9c31f8c8a9f200e593e3eda66275c2c11ec9e940cc18d5d3e858d16d4f3c5437897_
;; decl: addr
;; Remote call ISdk.hdkeyDeriveFromXprvPath
;; push identifier path
;; push identifier inXprv
;; push identifier answerId
PUSH3 S1, S2, S3
;; push identifier addr
PUSH S3
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x3989680000000000000000000000000000c2563e6b_
STSLICER
STU 32
STREF
STREF
ENDC
PUSHINT 0
SENDRAWMSG
; end function hdkeyDeriveFromXprvPath
BLKDROP 3

.globl	Sdk_no_obj_hdkeyDeriveFromXprvPath
.type	Sdk_no_obj_hdkeyDeriveFromXprvPath, @function
CALL $Sdk_no_obj_hdkeyDeriveFromXprvPath_macro$

.macro Sdk_no_obj_hdkeyDeriveFromXprvPath_macro
;; param: answerId
;; param: inXprv
;; param: path
; function hdkeyDeriveFromXprvPath
;; address.makeAddrStd()
PUSHSLICE x9c31f8c8a9f200e593e3eda66275c2c11ec9e940cc18d5d3e858d16d4f3c5437897_
;; decl: addr
;; Remote call ISdk.hdkeyDeriveFromXprvPath
;; push identifier path
;; push identifier inXprv
;; push identifier answerId
PUSH3 S1, S2, S3
;; push identifier addr
PUSH S3
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x3989680000000000000000000000000000c2563e6b_
STSLICER
STU 32
STREF
STREF
ENDC
PUSHINT 0
SENDRAWMSG
; end function hdkeyDeriveFromXprvPath
BLKDROP 4

.globl	Sdk_with_obj_hdkeySecretFromXprv
.type	Sdk_with_obj_hdkeySecretFromXprv, @function
CALL $Sdk_with_obj_hdkeySecretFromXprv_macro$

.macro Sdk_with_obj_hdkeySecretFromXprv_macro
;; param: answerId
;; param: xprv
; function hdkeySecretFromXprv
;; address.makeAddrStd()
PUSHSLICE x9c31f8c8a9f200e593e3eda66275c2c11ec9e940cc18d5d3e858d16d4f3c5437897_
;; decl: addr
;; Remote call ISdk.hdkeySecretFromXprv
;; push identifier xprv
;; push identifier answerId
;; push identifier addr
PUSH3 S1, S2, S0
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x398968000000000000000000000000000049661b8b_
STSLICER
STU 32
STREF
ENDC
PUSHINT 0
SENDRAWMSG
; end function hdkeySecretFromXprv
DROP2

.globl	Sdk_no_obj_hdkeySecretFromXprv
.type	Sdk_no_obj_hdkeySecretFromXprv, @function
CALL $Sdk_no_obj_hdkeySecretFromXprv_macro$

.macro Sdk_no_obj_hdkeySecretFromXprv_macro
;; param: answerId
;; param: xprv
; function hdkeySecretFromXprv
;; address.makeAddrStd()
PUSHSLICE x9c31f8c8a9f200e593e3eda66275c2c11ec9e940cc18d5d3e858d16d4f3c5437897_
;; decl: addr
;; Remote call ISdk.hdkeySecretFromXprv
;; push identifier xprv
;; push identifier answerId
;; push identifier addr
PUSH3 S1, S2, S0
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x398968000000000000000000000000000049661b8b_
STSLICER
STU 32
STREF
ENDC
PUSHINT 0
SENDRAWMSG
; end function hdkeySecretFromXprv
BLKDROP 3

.globl	Sdk_with_obj_naclSignKeypairFromSecretKey
.type	Sdk_with_obj_naclSignKeypairFromSecretKey, @function
CALL $Sdk_with_obj_naclSignKeypairFromSecretKey_macro$

.macro Sdk_with_obj_naclSignKeypairFromSecretKey_macro
;; param: answerId
;; param: secret
; function naclSignKeypairFromSecretKey
;; address.makeAddrStd()
PUSHSLICE x9c31f8c8a9f200e593e3eda66275c2c11ec9e940cc18d5d3e858d16d4f3c5437897_
;; decl: addr
;; Remote call ISdk.naclSignKeypairFromSecretKey
;; push identifier secret
;; push identifier answerId
;; push identifier addr
PUSH3 S1, S2, S0
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x3989680000000000000000000000000003_
STSLICER
ROTREV
NEWC
STSLICECONST x5340824d
STU 32
STU 256
STBREFR
ENDC
PUSHINT 0
SENDRAWMSG
; end function naclSignKeypairFromSecretKey
DROP2

.globl	Sdk_no_obj_naclSignKeypairFromSecretKey
.type	Sdk_no_obj_naclSignKeypairFromSecretKey, @function
CALL $Sdk_no_obj_naclSignKeypairFromSecretKey_macro$

.macro Sdk_no_obj_naclSignKeypairFromSecretKey_macro
;; param: answerId
;; param: secret
; function naclSignKeypairFromSecretKey
;; address.makeAddrStd()
PUSHSLICE x9c31f8c8a9f200e593e3eda66275c2c11ec9e940cc18d5d3e858d16d4f3c5437897_
;; decl: addr
;; Remote call ISdk.naclSignKeypairFromSecretKey
;; push identifier secret
;; push identifier answerId
;; push identifier addr
PUSH3 S1, S2, S0
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x3989680000000000000000000000000003_
STSLICER
ROTREV
NEWC
STSLICECONST x5340824d
STU 32
STU 256
STBREFR
ENDC
PUSHINT 0
SENDRAWMSG
; end function naclSignKeypairFromSecretKey
BLKDROP 3

.globl	Terminal_with_obj_input
.type	Terminal_with_obj_input, @function
CALL $Terminal_with_obj_input_macro$

.macro Terminal_with_obj_input_macro
;; param: answerId
;; param: prompt
;; param: multiline
; function input
;; address.makeAddrStd()
PUSHSLICE x9c30f2ca6c6cddc430a5b6adb996c178ac8b316c3190cbf8a1916356e81774251c7_
;; decl: addr
;; Remote call ITerminal.input
;; push identifier multiline
;; push identifier prompt
;; push identifier answerId
PUSH3 S1, S2, S3
;; push identifier addr
PUSH S3
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x398968000000000000000000000000000072abee5f_
STSLICER
STU 32
STREF
STI 1
ENDC
PUSHINT 0
SENDRAWMSG
; end function input
BLKDROP 3

.globl	Terminal_no_obj_input
.type	Terminal_no_obj_input, @function
CALL $Terminal_no_obj_input_macro$

.macro Terminal_no_obj_input_macro
;; param: answerId
;; param: prompt
;; param: multiline
; function input
;; address.makeAddrStd()
PUSHSLICE x9c30f2ca6c6cddc430a5b6adb996c178ac8b316c3190cbf8a1916356e81774251c7_
;; decl: addr
;; Remote call ITerminal.input
;; push identifier multiline
;; push identifier prompt
;; push identifier answerId
PUSH3 S1, S2, S3
;; push identifier addr
PUSH S3
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x398968000000000000000000000000000072abee5f_
STSLICER
STU 32
STREF
STI 1
ENDC
PUSHINT 0
SENDRAWMSG
; end function input
BLKDROP 4

.globl	Terminal_with_obj_print
.type	Terminal_with_obj_print, @function
CALL $Terminal_with_obj_print_macro$

.macro Terminal_with_obj_print_macro
;; param: answerId
;; param: message
; function print
;; address.makeAddrStd()
PUSHSLICE x9c30f2ca6c6cddc430a5b6adb996c178ac8b316c3190cbf8a1916356e81774251c7_
;; decl: addr
;; Remote call ITerminal.print
;; push identifier message
;; push identifier answerId
;; push identifier addr
PUSH3 S1, S2, S0
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x398968000000000000000000000000000019cc9385_
STSLICER
STU 32
STREF
ENDC
PUSHINT 0
SENDRAWMSG
; end function print
DROP2

.globl	Terminal_no_obj_print
.type	Terminal_no_obj_print, @function
CALL $Terminal_no_obj_print_macro$

.macro Terminal_no_obj_print_macro
;; param: answerId
;; param: message
; function print
;; address.makeAddrStd()
PUSHSLICE x9c30f2ca6c6cddc430a5b6adb996c178ac8b316c3190cbf8a1916356e81774251c7_
;; decl: addr
;; Remote call ITerminal.print
;; push identifier message
;; push identifier answerId
;; push identifier addr
PUSH3 S1, S2, S0
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x398968000000000000000000000000000019cc9385_
STSLICER
STU 32
STREF
ENDC
PUSHINT 0
SENDRAWMSG
; end function print
BLKDROP 3

.macro public_function_selector
DUP
PUSHINT 523943293
LEQ
IFJMPREF {
	DUP
	PUSHINT 46345047
	LEQ
	IFJMPREF {
		DUP
		EQINT 1
		IFJMPREF {
			CALL $start$
		}
		DUP
		PUSHINT 3563
		EQUAL
		IFJMPREF {
			CALL $getDebotInfo$
		}
		DUP
		PUSHINT 17991549
		EQUAL
		IFJMPREF {
			CALL $verifySeedPhrase$
		}
		DUP
		PUSHINT 46345047
		EQUAL
		IFJMPREF {
			CALL $checkSeedPhrase$
		}
	}
	DUP
	PUSHINT 163222878
	LEQ
	IFJMPREF {
		DUP
		PUSHINT 76306845
		EQUAL
		IFJMPREF {
			CALL $SCcheckPubKey$
		}
		DUP
		PUSHINT 88233906
		EQUAL
		IFJMPREF {
			CALL $onsetCLDebadd$
		}
		DUP
		PUSHINT 106384997
		EQUAL
		IFJMPREF {
			CALL $SCgetTS$
		}
		DUP
		PUSHINT 163222878
		EQUAL
		IFJMPREF {
			CALL $getMasterKeysFromMnemonicStep1$
		}
	}
	DUP
	PUSHINT 258836457
	LEQ
	IFJMPREF {
		DUP
		PUSHINT 189888177
		EQUAL
		IFJMPREF {
			CALL $deploy_genAddr$
		}
		DUP
		PUSHINT 212884318
		EQUAL
		IFJMPREF {
			CALL $isActionTeamMemberCheck$
		}
		DUP
		PUSHINT 250476418
		EQUAL
		IFJMPREF {
			CALL $preStart$
		}
		DUP
		PUSHINT 258836457
		EQUAL
		IFJMPREF {
			CALL $setIcon$
		}
	}
	DUP
	PUSHINT 523943293
	LEQ
	IFJMPREF {
		DUP
		PUSHINT 379360001
		EQUAL
		IFJMPREF {
			CALL $SCgetAddresPart$
		}
		DUP
		PUSHINT 511949466
		EQUAL
		IFJMPREF {
			CALL $getAddresPart$
		}
		DUP
		PUSHINT 522979047
		EQUAL
		IFJMPREF {
			CALL $setACTMdebAddress$
		}
		DUP
		PUSHINT 523943293
		EQUAL
		IFJMPREF {
			CALL $SCgetDAstruct$
		}
	}
}
DUP
PUSHINT 1263239010
LEQ
IFJMPREF {
	DUP
	PUSHINT 739503393
	LEQ
	IFJMPREF {
		DUP
		PUSHINT 649551061
		EQUAL
		IFJMPREF {
			CALL $getFCAddressAndKeys$
		}
		DUP
		PUSHINT 670720486
		EQUAL
		IFJMPREF {
			CALL $deauditsCaller$
		}
		DUP
		PUSHINT 728376660
		EQUAL
		IFJMPREF {
			CALL $getMasterKeysFromMnemonicStep4$
		}
		DUP
		PUSHINT 739503393
		EQUAL
		IFJMPREF {
			CALL $menuEnterSeedPhrase$
		}
	}
	DUP
	PUSHINT 1073606278
	LEQ
	IFJMPREF {
		DUP
		PUSHINT 749555203
		EQUAL
		IFJMPREF {
			CALL $deployCall$
		}
		DUP
		PUSHINT 827183851
		EQUAL
		IFJMPREF {
			CALL $onGetGiverAddress$
		}
		DUP
		PUSHINT 898299379
		EQUAL
		IFJMPREF {
			CALL $getParticipantAddressCallback$
		}
		DUP
		PUSHINT 1073606278
		EQUAL
		IFJMPREF {
			CALL $preSstart$
		}
	}
	DUP
	PUSHINT 1194747359
	LEQ
	IFJMPREF {
		DUP
		PUSHINT 1173194401
		EQUAL
		IFJMPREF {
			CALL $getBalanceOfSuccess$
		}
		DUP
		PUSHINT 1182827257
		EQUAL
		IFJMPREF {
			CALL $enterATMdebot$
		}
		DUP
		PUSHINT 1184379414
		EQUAL
		IFJMPREF {
			CALL $someError$
		}
		DUP
		PUSHINT 1194747359
		EQUAL
		IFJMPREF {
			CALL $getFromDAD$
		}
	}
	DUP
	PUSHINT 1263239010
	LEQ
	IFJMPREF {
		DUP
		PUSHINT 1245629296
		EQUAL
		IFJMPREF {
			CALL $checkDeployAnswer$
		}
		DUP
		PUSHINT 1259320241
		EQUAL
		IFJMPREF {
			CALL $onsetDebadd$
		}
		DUP
		PUSHINT 1260116821
		EQUAL
		IFJMPREF {
			CALL $mainMenu$
		}
		DUP
		PUSHINT 1263239010
		EQUAL
		IFJMPREF {
			CALL $setCLdebAddress$
		}
	}
}
DUP
PUSHINT 2098441039
LEQ
IFJMPREF {
	DUP
	PUSHINT 1482960138
	LEQ
	IFJMPREF {
		DUP
		PUSHINT 1339057434
		EQUAL
		IFJMPREF {
			CALL $showMnemonic$
		}
		DUP
		PUSHINT 1348879102
		EQUAL
		IFJMPREF {
			CALL $getMasterKeysFromMnemonicStep2$
		}
		DUP
		PUSHINT 1358660711
		EQUAL
		IFJMPREF {
			CALL $DAmenu$
		}
		DUP
		PUSHINT 1482960138
		EQUAL
		IFJMPREF {
			CALL $getRequiredInterfaces$
		}
	}
	DUP
	PUSHINT 1511497787
	LEQ
	IFJMPREF {
		DUP
		PUSHINT 1484565528
		EQUAL
		IFJMPREF {
			CALL $setGiverSuccess$
		}
		DUP
		PUSHINT 1501446644
		EQUAL
		IFJMPREF {
			CALL $getMasterKeysFromMnemonicStep3$
		}
		DUP
		PUSHINT 1502274774
		EQUAL
		IFJMPREF {
			CALL $menuGenSeedPhrase$
		}
		DUP
		PUSHINT 1511497787
		EQUAL
		IFJMPREF {
			CALL $goToCLdebot$
		}
	}
	DUP
	PUSHINT 1568115769
	LEQ
	IFJMPREF {
		DUP
		PUSHINT 1539101388
		EQUAL
		IFJMPREF {
			CALL $showVotingAuditss$
		}
		DUP
		PUSHINT 1551076115
		EQUAL
		IFJMPREF {
			CALL $SCgetDeauditAddresses$
		}
		DUP
		PUSHINT 1556291458
		EQUAL
		IFJMPREF {
			CALL $SCcheckACTM$
		}
		DUP
		PUSHINT 1568115769
		EQUAL
		IFJMPREF {
			CALL $setABI$
		}
	}
	DUP
	PUSHINT 2098441039
	LEQ
	IFJMPREF {
		DUP
		PUSHINT 1574966571
		EQUAL
		IFJMPREF {
			CALL $deployParticipantSuccess$
		}
		DUP
		PUSHINT 1601205352
		EQUAL
		IFJMPREF {
			CALL $showCurDAD$
		}
		DUP
		PUSHINT 1756716863
		EQUAL
		IFJMPREF {
			CALL $constructor$
		}
		DUP
		PUSHINT 2098441039
		EQUAL
		IFJMPREF {
			CALL $membersMenu$
		}
	}
}
DUP
PUSHINT 2138477742
LEQ
IFJMPREF {
	DUP
	PUSHINT 2102773688
	EQUAL
	IFJMPREF {
		CALL $getBalanceOf$
	}
	DUP
	PUSHINT 2112671963
	EQUAL
	IFJMPREF {
		CALL $getDebotOptions$
	}
	DUP
	PUSHINT 2135367155
	EQUAL
	IFJMPREF {
		CALL $SCgetFromDAD$
	}
	DUP
	PUSHINT 2138477742
	EQUAL
	IFJMPREF {
		CALL $getMasterKeysFromMnemonic$
	}
}
